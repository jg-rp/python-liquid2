{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Liquid2","text":"<p>Liquid is a template language, where source text (the template) contains placeholders for variables, conditional expressions for including or excluding blocks of text, and loops for repeating blocks of text. Plus other syntax for manipulating variables and combining multiple templates into a single output.</p> <p>Python Liquid2 is a flexible, non-evaluating Liquid template engine. We cater for situations where templates change and grow with an application's user base, and the authors of those templates are potentially untrusted.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Flexible: Add to, remove or replace built-in tags and filters to suite your needs. Also choose from several built-in template loaders or define your own custom template loader.</p> </li> <li> <p>Asynchronous: For situations where you have too many templates to fit in memory or those templates change frequently, they can be loaded asynchronously from file systems, databases or over a network. Similarly, template data can be fetch lazily at render time, also asynchronously.</p> </li> <li> <p>Template inheritance: Python Liquid2 has built-in template inheritance features. As well and including or rendering a partial template, you can extend parent templates by defining template blocks.</p> </li> <li> <p>Static analysis: Python Liquid2 exposes a syntax tree for each template and built-in tools for analyzing tag, filter and variable usage. You can also extract comment text and have the option of loading and analyzing included/rendered/extended templates too.</p> </li> <li> <p>Internationalization and localization: Templates have built-in support for translator comments and extracting message catalogs, plus filters for formatting currency, dates, times and numbers for international users.</p> </li> <li> <p>Compatible: Python Liquid2 is backwards compatible with Shopify/Liquid, the original authors of the Liquid template language, with a few exceptions.</p> </li> </ul>"},{"location":"#get-started","title":"Get started","text":"<p>Have a look at the quick start guide and browse through the built-in tags and filters.</p> <p>If you're coming from Python Liquid version 1, check out the migration guide.</p>"},{"location":"conventions/","title":"Conventions","text":"<p>Throughout this documentation we use icons to indicate if a feature is experimental, compatible with shopify and what version it was introduced.</p>"},{"location":"conventions/#version","title":"\u2013 Version","text":"<p>Shows the minimum version of Liquid2 that is required to use a feature.</p>"},{"location":"conventions/#experimental","title":"\u2013 Experimental","text":"<p>Indicates that the feature or example code is experimental and might be changed without warning or appropriate semantic versioning.</p>"},{"location":"conventions/#shopify","title":"\u2013 Shopify/Liquid compatible","text":"<p>Indicates that the feature or example code is compatible with Shopify/Liquid.</p>"},{"location":"conventions/#liquid2","title":"\u2013 New to Liquid2","text":"<p>Indicates that the feature or example code is new to Liquid2 and not compatible with Shopify/Liquid.</p>"},{"location":"environment/","title":"Liquid environments","text":"<p>TODO:</p>"},{"location":"filter_reference/","title":"Filter reference","text":""},{"location":"filter_reference/#abs","title":"abs","text":""},{"location":"filter_reference/#append","title":"append","text":""},{"location":"filter_reference/#at_least","title":"at_least","text":""},{"location":"filter_reference/#at_most","title":"at_most","text":""},{"location":"filter_reference/#capitalize","title":"capitalize","text":""},{"location":"filter_reference/#ceil","title":"ceil","text":""},{"location":"filter_reference/#compact","title":"compact","text":""},{"location":"filter_reference/#concat","title":"concat","text":""},{"location":"filter_reference/#currency","title":"currency","text":""},{"location":"filter_reference/#date","title":"date","text":""},{"location":"filter_reference/#datetime","title":"datetime","text":""},{"location":"filter_reference/#decimal","title":"decimal","text":""},{"location":"filter_reference/#default","title":"default","text":""},{"location":"filter_reference/#divided_by","title":"divided_by","text":""},{"location":"filter_reference/#downcase","title":"downcase","text":""},{"location":"filter_reference/#escape","title":"escape","text":""},{"location":"filter_reference/#escape_once","title":"escape_once","text":""},{"location":"filter_reference/#first","title":"first","text":""},{"location":"filter_reference/#floor","title":"floor","text":""},{"location":"filter_reference/#gettext","title":"gettext","text":""},{"location":"filter_reference/#join","title":"join","text":""},{"location":"filter_reference/#json","title":"json","text":""},{"location":"filter_reference/#last","title":"last","text":""},{"location":"filter_reference/#lstrip","title":"lstrip","text":""},{"location":"filter_reference/#map","title":"map","text":""},{"location":"filter_reference/#minus","title":"minus","text":""},{"location":"filter_reference/#modulo","title":"modulo","text":""},{"location":"filter_reference/#money","title":"money","text":""},{"location":"filter_reference/#money_with_currency","title":"money_with_currency","text":""},{"location":"filter_reference/#money_without_currency","title":"money_without_currency","text":""},{"location":"filter_reference/#money_without_trailing_zeros","title":"money_without_trailing_zeros","text":""},{"location":"filter_reference/#newline_to_br","title":"newline_to_br","text":""},{"location":"filter_reference/#ngettext","title":"ngettext","text":""},{"location":"filter_reference/#npgettext","title":"npgettext","text":""},{"location":"filter_reference/#pgettext","title":"pgettext","text":""},{"location":"filter_reference/#plus","title":"plus","text":""},{"location":"filter_reference/#prepend","title":"prepend","text":""},{"location":"filter_reference/#remove","title":"remove","text":""},{"location":"filter_reference/#remove_first","title":"remove_first","text":""},{"location":"filter_reference/#remove_last","title":"remove_last","text":""},{"location":"filter_reference/#replace","title":"replace","text":""},{"location":"filter_reference/#replace_first","title":"replace_first","text":""},{"location":"filter_reference/#replace_last","title":"replace_last","text":""},{"location":"filter_reference/#reverse","title":"reverse","text":""},{"location":"filter_reference/#round","title":"round","text":""},{"location":"filter_reference/#rstrip","title":"rstrip","text":""},{"location":"filter_reference/#safe","title":"safe","text":""},{"location":"filter_reference/#size","title":"size","text":""},{"location":"filter_reference/#slice","title":"slice","text":""},{"location":"filter_reference/#sort","title":"sort","text":""},{"location":"filter_reference/#sort_natural","title":"sort_natural","text":""},{"location":"filter_reference/#sort_numeric","title":"sort_numeric","text":""},{"location":"filter_reference/#split","title":"split","text":""},{"location":"filter_reference/#strip","title":"strip","text":""},{"location":"filter_reference/#strip_html","title":"strip_html","text":""},{"location":"filter_reference/#strip_newlines","title":"strip_newlines","text":""},{"location":"filter_reference/#sum","title":"sum","text":""},{"location":"filter_reference/#t","title":"t","text":""},{"location":"filter_reference/#times","title":"times","text":""},{"location":"filter_reference/#truncate","title":"truncate","text":""},{"location":"filter_reference/#truncatewords","title":"truncatewords","text":""},{"location":"filter_reference/#uniq","title":"uniq","text":""},{"location":"filter_reference/#unit","title":"unit","text":""},{"location":"filter_reference/#upcase","title":"upcase","text":""},{"location":"filter_reference/#url_decode","title":"url_decode","text":""},{"location":"filter_reference/#url_encode","title":"url_encode","text":""},{"location":"filter_reference/#where","title":"where","text":""},{"location":"loading_templates/","title":"Loading templates","text":""},{"location":"loading_templates/#template-loaders","title":"Template loaders","text":"<p>TODO:</p> <p>Configuring an Liquid environment with a template loader is essential if you want to use the built-in <code>{% include %}</code>, <code>{% render %}</code> or <code>{% extends %}</code> tags. Otherwise Liquid would not know where to find your templates.</p>"},{"location":"loading_templates/#caching-template-loaders","title":"Caching template loaders","text":"<p>TODO</p>"},{"location":"migration/","title":"Migration guide","text":"<p>Liquid2 changes Liquid syntax and features and the template engine's Python API. Liquid2's default syntax and semantics are mostly backwards compatible with version 1 and, by extension, Shopify/Liquid.</p>"},{"location":"migration/#approach-to-compatibility-and-stability","title":"Approach to compatibility and stability","text":"<p>With Python Liquid version 1, our primary objectives were render behavior stability and Shopify/Liquid compatibility, in that order. Later we introduced <code>liquid.future.Environment</code>, which sacrificed some stability for greater Shopify/Liquid compatibility as Shopify/Liquid and our understanding of it changed.</p> <p>Now, with Python Liquid version 2, render behavior stability is still the top priority, but the default environment deliberately deviates from Shopify/Liquid in several ways, \"fixing\" and adding often requested features that Shopify can't due to their large user base and the technical debt that comes with it.</p> <p>In most cases these fixes and features are backwards compatible with Shopify/Liquid, requiring little or no modification to legacy Liquid templates. To ease transition from legacy templates to Liquid2 templates we include a <code>liquid2.shopify.Environment</code>, which is configured to include some legacy tags that didn't make it in to the default environment.</p>"},{"location":"migration/#why-is-render-stability-so-important","title":"Why is render stability so important?","text":"<p>When developing a conventional website, for example, templates are developed along side application code. Template authors and application developers might be different people or different teams, but templates are known at deployment time, and all templates can probably be parsed upfront and held in memory. In this scenario it's a pain if your template render engine introduces behavioral changes, but it's manageable.</p> <p>Python Liquid caters for situations where templates change and grow with an application's user base. Not only can templates change after the application is deployed, but the number of templates could be huge, far more than can be expected to fit in memory at one time.</p> <p>Behavioral stability is essential when application users are responsible for maintaining templates. It is impractical or unreasonable to expect authors to update their templates on demand.</p> <p>Whether shopify/Liquid compatibility is important to you or not, if you\u2019re developing a multi-tenant application where users are responsible for maintaining templates, you should seriously consider building in an opt-in upgrade path for template authors to transition to updated syntax and features.</p>"},{"location":"migration/#new-features","title":"New features","text":"<p>The following features are new or are now built-in where they weren't before.</p> <ul> <li>More whitespace control. Along with a <code>default_trim</code> configuration option, tags and the output statement now support <code>+</code>, <code>-</code> and <code>~</code> for controlling whitespace in templates. By default, <code>~</code> will remove newlines but retain space and tab characters.</li> <li>String literals support interpolation using <code>${</code> and <code>}</code> as delimiters. For example, <code>{% echo 'Hello, ${you | capitalize}' %}</code>.</li> <li>Logical expressions now support negation with the <code>not</code> operator and grouping terms with parentheses by default.</li> <li>Ternary expressions are now available by default. For example, <code>{{ a if b else c }}</code> or <code>{{ a | upcase if b == 'foo' else c || split }}</code>.</li> <li>Inline comments surrounded by <code>{#</code> and <code>#}</code> are enabled by default. Additional <code>#</code>\u2019s can be added to comment out blocks of markup that already contain comments, as long as the number of hashes match.</li> <li>String literals are allowed to contain markup delimiters (<code>{{</code>, <code>}}</code>, <code>{%</code>, <code>%}</code>, <code>{#</code> and <code>#}</code>) and support c-like escape sequence to allow for including quote characters.</li> <li>Identifiers and paths resolving to variables can contain Unicode characters.</li> <li>Integer and float literals can use scientific notation, like <code>1.2e10</code>.</li> <li>Filter and tag named arguments can be separated by a <code>:</code> or <code>=</code>.</li> <li>Template inheritance is now built-in. Previously <code>{% extends %}</code> and <code>{% block %}</code> tags were available from a separate package.</li> <li>Internationalization and localization tags and filters are now built-in. Previously these were in a separate package.</li> <li>Templates are now serializable. Use <code>str(template)</code> or <code>pickle.dump(template)</code>.</li> <li>Error messages have been improved and exceptions expose line and column numbers.</li> <li>A new test suite is included if you'd like to implement Liquid2 in another language.</li> </ul>"},{"location":"migration/#features-that-have-been-removed","title":"Features that have been removed","text":"<p>These features are not yet included in Python Liquid2, but can be if there is a demand.</p> <ul> <li>Async filters have not been implemented.</li> <li>Contextual template analysis has not been implemented.</li> <li>Template tag analysis (analyzing tokens instead of a syntax tree) has not been implemented.</li> <li>The <code>@liquid_filter</code> decorator has been removed. Now filter implementations are expected to raise a <code>LiquidTypeError</code> in the even of an argument with an unacceptable type.</li> <li>Liquid Babel used to allow simple, zero-argument filters in the arguments to the <code>translate</code> tag. The <code>translate</code> tag bundled in to Liquid2 does not allow the use of filters here.</li> </ul>"},{"location":"migration/#api-changes","title":"API changes","text":"<p>These are the most notable changes. Please raise an issue or start a discussion if I've missed anything or you need help with migration.</p> <ul> <li>Package level <code>Template</code> can no longer be used as a convenience function for creating a template from a string. Use <code>parse()</code> or <code>DEFAULT_ENVIRONMENT.from_string()</code> instead.</li> <li>StrictUndefined now plays nicely with the <code>default</code> filter. Previously we had a separate <code>StrictDefaultUndefined</code> class.</li> <li><code>FileSystemLoader</code> now takes an optional default file extension to use when looking for files that don't already have an extension. Previously there was a separate <code>FileExtensionLoader</code>.</li> <li><code>AwareBoundTemplate</code> (a template with a built-in <code>template</code> drop) has been removed, but can be added as a feature later if there is a demand.</li> <li>The <code>auto_reload</code> and <code>cache_size</code> arguments to <code>Environment</code> have been removed. Now caching is handle by template loaders, not the environment. For example, pass a <code>CachingFileSystemLoader</code> as the <code>loader</code> argument to <code>Environment</code> instead of a <code>FileSystemLoader</code>.</li> <li>The <code>strict_filters</code> argument to <code>Environment</code> has been removed. Unknown filters now always raise ab <code>UnknownFilterError</code>.</li> <li><code>TemplateNotFound</code> has been renamed to <code>TemplateNotFoundError</code>.</li> <li><code>Context</code> has been renamed to <code>RenderContext</code> and now takes a mandatory <code>template</code> argument instead of <code>env</code>. All other arguments to <code>RenderContext</code> are now keyword only.</li> <li><code>FilterValueError</code> and <code>FilterArgumentError</code> have been removed. <code>LiquidValueError</code> and <code>LiquidTypeError</code> should be used instead. In some cases where <code>FilterValueError</code> was deliberately ignored before, <code>LiquidValueError</code> is now raised.</li> <li>The exception <code>NoSuchFilterFunc</code>, raised when rendering a template that uses a filter that is not defined in <code>Environment.filters</code>, has been renamed to <code>UnknownFilterError</code>.</li> </ul>"},{"location":"migration/#template-and-expression-parsing","title":"Template and expression parsing","text":"<p>The lexer has been completely rewritten and the token's it produces bare little resemblance to those produced by any of the several parsing functions from Python Liquid version 1. Now we have a single lexer that scans source text content, tags, statements and expressions in a single pass, and a parser that delegates the parsing of those tokens to classes implementing <code>Tag</code>.</p> <p>As before, <code>Tag</code> instances are responsible for returning <code>Node</code>s from <code>Tag.parse()</code>. And nodes still have the familiar <code>render_to_output()</code> abstract method.</p> <p>For now I recommend familiarizing yourself with the different tokens generated by the lexer, and refer to built-in tag implementations for examples of using various <code>Expression.parse()</code> static methods to parse expressions.</p> <p>As always, open an issue or start a discussion if you need any help with migration.</p>"},{"location":"migration/#performance","title":"Performance","text":"<p>TODO:</p> <ul> <li>Benchmarks show Python Liquid2 to be more JIT friendly</li> </ul>"},{"location":"migration/#package-dependencies","title":"Package dependencies","text":"<p>The following packages are dependencies of Python Liquid2.</p> <ul> <li>Markupsafe&gt;=3</li> <li>Babel&gt;=2</li> <li>python-dateutil</li> <li>pytz</li> <li>typing-extensions</li> </ul>"},{"location":"quick_start/","title":"Quick start","text":"<p>This page gets you started using Liquid with Python. See Liquid syntax for an introduction to writing Liquid templates.</p>"},{"location":"quick_start/#install","title":"Install","text":"<p>Install Python Liquid2 from PyPi using pip:</p> <pre><code>python -m pip install python-liquid2\n</code></pre> <p>Or Pipenv:</p> <pre><code>pipenv install python-liquid2\n</code></pre> <p>Or Poetry:</p> <pre><code>poetry add python-liquid2\n</code></pre>"},{"location":"quick_start/#render","title":"<code>render()</code>","text":"<p>Here's a very simple example that renders a template from a string of text with the package-level <code>render()</code> function. The template has just one placeholder variable <code>you</code>, which we've given the value <code>\"World\"</code>.</p> <pre><code>from liquid2 import render\n\nprint(render(\"Hello, {{ you }}!\", you=\"World\"))\n# Hello, World!\n</code></pre>"},{"location":"quick_start/#parse","title":"<code>parse()</code>","text":"<p>Often you'll want to render the same template several times with different variables. We can parse source text without immediately rendering it using the <code>parse()</code> function. <code>parse()</code> returns a <code>Template</code> instance with a <code>render()</code> method.</p> <pre><code>from liquid2 import parse\n\ntemplate = parse(\"Hello, {{ you }}!\")\nprint(template.render(you=\"World\"))  # Hello, World!\nprint(template.render(you=\"Liquid\"))  # Hello, Liquid!\n</code></pre>"},{"location":"quick_start/#configure","title":"Configure","text":"<p>Both <code>parse()</code> and <code>render()</code> are convenience functions that use the default Liquid environment. For all but the simplest cases you'll want to configure an instance of <code>Environment</code>, then load and render templates from that.</p> <pre><code>from liquid2 import CachingFileSystemLoader\nfrom liquid2 import Environment\n\nenv = Environment(\n    auto_escape=True,\n    loader=CachingFileSystemLoader(\"./templates\"),\n)\n</code></pre> <p>Then, using <code>env.from_string()</code> or <code>env.get_template()</code>, we can create a <code>Template</code> from a string or read from the file system, respectively.</p> <pre><code># ... continued from above\ntemplate = env.from_string(\"Hello, {{ you }}!\")\nprint(template.render(you=\"World\"))  # Hello, World!\n\n# Try to load \"./templates/index.html\"\nanother_template = env.get_template(\"index.html\")\ndata = {\"some\": {\"thing\": [1, 2, 3]}}\nresult = another_template.render(**data)\n</code></pre> <p>Unless you happen to have a relative folder called <code>templates</code> with a file called <code>index.html</code> within it, we would expect a <code>TemplateNotFoundError</code> to be raised when running the example above.</p>"},{"location":"quick_start/#whats-next","title":"What's next?","text":"<p>Read more about configuring Liquid environments, template loaders and managing render context data.</p>"},{"location":"tag_reference/","title":"Tag reference","text":""},{"location":"tag_reference/#comments","title":"Comments","text":"<p>0.1.0 </p> <p>Comments can be used to add documentation to your templates or \"comment out\" chunks of Liquid markup and text so that it wont be rendered. The recommended comment syntax is to surround comment text with <code>{#</code> and <code>#}</code>.</p> <pre><code>{# This is a comment #}\n{#\n    Comments can\n    span\n    multiple lines\n#}\n</code></pre> <p>We can safely comment-out Liquid markup, and add hashes so as not to conflict with existing comments.</p> <pre><code>{## comment this out for now\n{% for x in y %}\n    {# x could be empty #}\n    {{ x | default: TODO}}\n{% endfor %}\n##}\n</code></pre> <p>Inside liquid tags, any line starting with a hash will be considered a comment.</p> <pre><code>{% liquid\n  # This is a comment\n  echo \"Hello\"\n%}\n</code></pre>"},{"location":"tag_reference/#block-comments","title":"Block comments","text":"<p>0.1.0 </p> <pre><code>{% comment %} ... {% endcomment %}\n</code></pre> <p>Block comments start with the <code>comment</code> tag and end with the <code>endcomment</code> tag. It is OK for comment text to contain matching <code>comment</code>/<code>endcomment</code> or <code>raw</code>/<code>endraw</code> pairs, but is a syntax error if <code>comment</code> or <code>raw</code> tags are unbalanced.</p> <pre><code>{% comment %}This is a comment{% endcomment %}\n{% comment %}\n    Comments can\n    span\n    multiple lines\n{% endcomment %}\n</code></pre>"},{"location":"tag_reference/#inline-comments","title":"Inline comments","text":"<p>0.1.0 </p> <pre><code>{% # ... %}\n</code></pre> <p>An inline comment is a tag called <code>#</code>. Everything after the hash up to the end tag delimiter (<code>%}</code>) is comment text. Text can span multiple lines, but each line must start with a <code>#</code>.</p> <pre><code>{% # This is a comment %}\n{%-\n  # Comments can span multiple lines,\n  # but every line must start with a hash.\n-%}\n</code></pre>"},{"location":"tag_reference/#assign","title":"assign","text":"<p>0.1.0 </p> <pre><code>{% assign &lt;identifier&gt; = &lt;expression&gt; %}\n</code></pre> <p>The <code>assign</code> tag is used to define and initialize new variables or reassign existing variables.</p> <pre><code>{% assign foo = \"bar\" %}\nfoo is equal to {{ foo }}.\n\n{% assign foo = 42 %}\nfoo is now equal to {{ foo }}.\n</code></pre> <p>The expression on the right-hand side of the assignment operator (<code>=</code>) can be any Liquid primitive.</p> Primitive expression Examples Boolean literal <code>true</code> or <code>false</code> Null literal <code>null</code> or <code>nil</code> Integer literal <code>123</code> or <code>1e2</code> Float literal <code>1.23</code> or <code>1.2e3</code> String literal <code>\"Hello\"</code> or <code>'g\\'day'</code>  or <code>'Hello, ${you}'</code> Range <code>(1..5)</code> or <code>(x..y)</code> A path to a variable <code>foo</code> or <code>foo.bar</code> or <code>foo.bar[0]</code> or <code>foo[\"some thing\"].bar</code>"},{"location":"tag_reference/#filters","title":"Filters","text":"<p>0.1.0 </p> <pre><code>{% assign &lt;identifier&gt; = &lt;expression&gt; | &lt;filter&gt; [| &lt;filter&gt; ...] %}\n</code></pre> <p>Values can be modified prior to assignment using filters. Filters are applied to an expression using the pipe symbol (<code>|</code>), followed by the filter's name and, possibly, some filter arguments. Filter arguments appear after a colon (<code>:</code>) and are separated by commas (,).</p> <p>Multiple filters can be chained together, effectively piping the output of one filter into the input of another.</p> <pre><code>{% assign foo = \"bar\" | upcase %}\nfoo is equal to {{ foo }}.\n\n{% assign foo = 42 | plus: 7 | modulo: 3 %}\nfoo is now equal to {{ foo }}.\n</code></pre>"},{"location":"tag_reference/#ternary-expressions","title":"Ternary expressions","text":"<p>0.1.0 </p> <pre><code>{% assign &lt;identifier&gt; = &lt;expression&gt; if &lt;expression&gt; else &lt;expression&gt; %}\n</code></pre> <p>Inline conditional expressions can be used as an alternative to the longer for <code>{% if %}</code> tag.</p> <pre><code>{% assign foo = \"bar\" if x.y == z else \"baz\" %}\n</code></pre> <p>Filters can be applied to either branch.</p> <pre><code>{% assign foo = \"bar\" | upcase if x else \"baz\" | capitalize %}\n</code></pre> <p>Or to the result of the conditional expression as a whole using tail filters. Notice the double pipe symbol (<code>||</code>).</p> <pre><code>{% assign foo = \"bar\" if x else \"baz\" || upcase | append: \"!\" %}\n</code></pre>"},{"location":"tag_reference/#capture","title":"capture","text":"<p>0.1.0 </p> <pre><code>{% capture &lt;identifier&gt; %} &lt;liquid markup&gt; {% endcapture %}\n</code></pre> <p>The <code>capture</code> tag renders the contents of its block and saves the resulting string as a new variable, or reassigns an existing variable.</p> <pre><code>{% capture welcome_message %}\n  Hello, {{ customer.name }}! Welcome to our store.\n{% endcapture %}\n\n{{ welcome_message }}\n</code></pre> <p>In some cases, it can be easier to use a template string .</p> <pre><code>{% assign welcome_message = \"Hello, ${ customer.name }! Welcome to our store.\" %}\n</code></pre>"},{"location":"tag_reference/#case","title":"case","text":"<p>0.1.0 </p> <pre><code>{% case &lt;expression&gt; %}\n  [ {% when &lt;expression&gt; %} &lt;liquid markup&gt; ] ...\n  [ {% else %} &lt;liquid markup&gt; ]\n{% endcase %}\n</code></pre> <p>The <code>case</code> tag evaluates an expression, matching the result against one or move <code>when</code> clauses. In the event of a match, the <code>when</code> block is rendered. The <code>else</code> clause is rendered if no <code>when</code> clauses match the <code>case</code> expression.</p> <pre><code>{% assign day = \"Monday\" %}\n\n{% case day %}\n  {% when \"Monday\" %}\n    Start of the work week!\n  {% when \"Friday\" %}\n    It's almost the weekend!\n  {% when \"Saturday\" or \"Sunday\" %}\n    Enjoy your weekend!\n  {% else %}\n    Just another weekday.\n{% endcase %}\n</code></pre>"},{"location":"tag_reference/#cycle","title":"cycle","text":"<p>0.1.0 </p> <pre><code>{% cycle [ &lt;string or identifier&gt;: ] &lt;expression&gt; [, &lt;expression&gt; ... ] %}\n</code></pre> <p>Render the next item in an iterator, initializing the and rendering the first value if it does not yet exist. When the items are exhausted, the iterator starts again from the beginning.</p> <pre><code>{% cycle 'odd', 'even' %}\n{% cycle 'odd', 'even' %}\n{% cycle 'odd', 'even' %}\n</code></pre> <p>You can give <code>cycle</code> a name to further distinguish multiple iterators with the same items.</p> <pre><code>{% cycle 'odd', 'even' %}\n{% cycle 'odd', 'even' %}\n{% cycle inner: 'odd', 'even' %}\n</code></pre>"},{"location":"tag_reference/#decrement","title":"decrement","text":""},{"location":"tag_reference/#echo","title":"echo","text":""},{"location":"tag_reference/#extends","title":"extends","text":""},{"location":"tag_reference/#block","title":"block","text":""},{"location":"tag_reference/#for","title":"for","text":""},{"location":"tag_reference/#if","title":"if","text":""},{"location":"tag_reference/#break","title":"break","text":""},{"location":"tag_reference/#continue","title":"continue","text":""},{"location":"tag_reference/#include","title":"include","text":""},{"location":"tag_reference/#increment","title":"increment","text":""},{"location":"tag_reference/#liquid","title":"liquid","text":""},{"location":"tag_reference/#macro","title":"macro","text":""},{"location":"tag_reference/#call","title":"call","text":""},{"location":"tag_reference/#raw","title":"raw","text":""},{"location":"tag_reference/#render","title":"render","text":""},{"location":"tag_reference/#translate","title":"translate","text":""},{"location":"tag_reference/#unless","title":"unless","text":""},{"location":"tag_reference/#with","title":"with","text":""},{"location":"api/babel/","title":"Babel","text":"<p>These are configurable class-based filters implementing internationalization and localization features.</p>"},{"location":"api/babel/#liquid2.builtin.filters.translate.BaseTranslateFilter","title":"liquid2.builtin.filters.translate.BaseTranslateFilter","text":"<p>Base class for the default translation filters.</p> PARAMETER DESCRIPTION <code>translations_var</code> <p>The name of a render context variable that resolves to a gettext <code>Translations</code> class. Defaults to <code>\"translations\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'translations'</code> </p> <code>default_translations</code> <p>A fallback translations class to use if <code>translations_var</code> can not be resolves. Defaults to <code>NullTranslations</code>.</p> <p> TYPE: <code>Translations | None</code> DEFAULT: <code>None</code> </p> <code>message_interpolation</code> <p>If <code>True</code> (default), perform printf-style string interpolation on the translated message, using keyword arguments passed to the filter function.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>auto_escape_message</code> <p>If <code>True</code> and the current environment has <code>auto_escape</code> set to <code>True</code>, the filter's left value will be escaped before translation. Defaults to <code>False</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api/babel/#liquid2.builtin.filters.translate.BaseTranslateFilter.format_message","title":"format_message","text":"<pre><code>format_message(\n    context: RenderContext,\n    message_text: str,\n    message_vars: dict[str, Any],\n) -&gt; str\n</code></pre> <p>Return the message string formatted with the given message variables.</p>"},{"location":"api/babel/#liquid2.builtin.DateTime","title":"liquid2.builtin.DateTime","text":"<p>A Liquid filter for formatting datetime objects.</p> PARAMETER DESCRIPTION <code>timezone_var</code> <p>The name of a render context variable that resolves to a timezone. Defaults to <code>\"timezone\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'timezone'</code> </p> <code>default_timezone</code> <p>A fallback timezone to use if <code>timezone_var</code> can not be resolved. Defaults to <code>\"UTC\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'UTC'</code> </p> <code>locale_var</code> <p>The name of a render context variable that resolves to the current locale. Defaults to <code>\"locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'locale'</code> </p> <code>default_locale</code> <p>A fallback locale to use if <code>locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p> <code>format_var</code> <p>The name of a render context variable that resolves to the current datetime format string. Defaults to <code>\"datetime_format\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'datetime_format'</code> </p> <code>default_format</code> <p>A fallback datetime format that is used if <code>format_var</code> can not be resolved. Defaults to <code>\"medium\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'medium'</code> </p> <code>input_timezone_var</code> <p>The name of a render context variable that resolves to a timezone for parsing datetimes entered as strings. Defaults to <code>\"input_timezone\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'input_timezone'</code> </p> <code>default_input_timezone</code> <p>A fallback timezone to use if <code>input_timezone_var</code> can not be resolved. Defaults to <code>\"UTC\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'UTC'</code> </p>"},{"location":"api/babel/#liquid2.builtin.DateTime.__call__","title":"__call__","text":"<pre><code>__call__(\n    left: object,\n    *,\n    context: RenderContext,\n    format: str | None = None\n) -&gt; str\n</code></pre> <p>Apply the filter and return the result.</p>"},{"location":"api/babel/#liquid2.builtin.GetText","title":"liquid2.builtin.GetText","text":"<p>               Bases: <code>BaseTranslateFilter</code>, <code>TranslatableFilter</code></p> <p>A Liquid filter equivalent of <code>gettext.gettext</code>.</p>"},{"location":"api/babel/#liquid2.builtin.NGetText","title":"liquid2.builtin.NGetText","text":"<p>               Bases: <code>BaseTranslateFilter</code>, <code>TranslatableFilter</code></p> <p>A Liquid filter equivalent of <code>gettext.ngettext</code>.</p>"},{"location":"api/babel/#liquid2.builtin.NGetText.__call__","title":"__call__","text":"<pre><code>__call__(\n    __left: object,\n    __plural: str,\n    __count: object,\n    *,\n    context: RenderContext,\n    **kwargs: Any\n) -&gt; str\n</code></pre> <p>Apply the filter and return the result.</p>"},{"location":"api/babel/#liquid2.builtin.NPGetText","title":"liquid2.builtin.NPGetText","text":"<p>               Bases: <code>BaseTranslateFilter</code>, <code>TranslatableFilter</code></p> <p>A Liquid filter equivalent of <code>gettext.npgettext</code>.</p>"},{"location":"api/babel/#liquid2.builtin.Number","title":"liquid2.builtin.Number","text":"<p>A Liquid filter for formatting decimal values.</p> PARAMETER DESCRIPTION <code>decimal_quantization_var</code> <p>The name of a render context variable that resolves to the decimal quantization to be used. Defaults to <code>\"decimal_quantization\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'decimal_quantization'</code> </p> <code>default_decimal_quantization</code> <p>A fallback decimal quantization if <code>decimal_quantization_var</code> can not be resolved. Defaults to <code>False</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>locale_var</code> <p>The name of a render context variable that resolves to the current locale. Defaults to <code>\"locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'locale'</code> </p> <code>default_locale</code> <p>A fallback locale to use if <code>locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p> <code>format_var</code> <p>The name of a render context variable that resolves to the current decimal format string. Defaults to <code>\"decimal_format\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'decimal_format'</code> </p> <code>default_format</code> <p>A fallback decimal format that is used if <code>format_var</code> can not be resolved. Defaults to <code>None</code>, which means the standard format for the current locale will be used.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>input_locale_var</code> <p>The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals. Defaults to <code>\"input_locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'input_locale'</code> </p> <code>default_input_locale</code> <p>A fallback locale to use if <code>input_locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p>"},{"location":"api/babel/#liquid2.builtin.Number.__call__","title":"__call__","text":"<pre><code>__call__(\n    left: object,\n    *,\n    context: RenderContext,\n    group_separator: bool = True\n) -&gt; str\n</code></pre> <p>Apply the filter and return the result.</p>"},{"location":"api/babel/#liquid2.builtin.Translate","title":"liquid2.builtin.Translate","text":"<p>               Bases: <code>BaseTranslateFilter</code>, <code>TranslatableFilter</code></p> <p>A Liquid filter for translating strings to other languages.</p> <p>Depending on the keyword arguments provided when the resulting filter is called, it could behave like gettext, ngettext, pgettext or npgettext.</p>"},{"location":"api/babel/#liquid2.builtin.Translate.__call__","title":"__call__","text":"<pre><code>__call__(\n    __left: object,\n    __message_context: object = None,\n    *,\n    context: RenderContext,\n    **kwargs: Any\n) -&gt; str\n</code></pre> <p>Apply the filter and return the result.</p>"},{"location":"api/babel/#liquid2.builtin.Unit","title":"liquid2.builtin.Unit","text":"<p>A Liquid filter for formatting units of measurement.</p> PARAMETER DESCRIPTION <code>locale_var</code> <p>The name of a render context variable that resolves to the current locale. Defaults to <code>\"locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'locale'</code> </p> <code>default_locale</code> <p>A fallback locale to use if <code>locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p> <code>length_var</code> <p>The name of a render context variable that resolves to a unit format length. Should be one of \"short\", \"long\" or \"narrow\". Defaults to <code>\"long\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'unit_length'</code> </p> <code>default_length</code> <p>A fallback format length to use if <code>length_var</code> can not be resolved.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'long'</code> </p> <code>format_var</code> <p>The name of a render context variable that resolves to a decimal format string. Defaults to <code>\"unit_format\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'unit_format'</code> </p> <code>default_format</code> <p>A fallback decimal format to use if <code>format_var</code> can not be resolved. Defaults to <code>None</code>, meaning the locale's standard decimal format is used.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>input_locale_var</code> <p>The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals. Defaults to <code>\"input_locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'input_locale'</code> </p> <code>default_input_locale</code> <p>A fallback locale to use if <code>input_locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p>"},{"location":"api/convenience/","title":"Convenience functions","text":""},{"location":"api/convenience/#liquid2.parse","title":"liquid2.parse","text":"<pre><code>parse(\n    source: str,\n    *,\n    name: str = \"\",\n    globals: Mapping[str, object] | None = None\n) -&gt; Template\n</code></pre> <p>Parse source as a Liquid template using the default environment.</p> PARAMETER DESCRIPTION <code>source</code> <p>Liquid template source code.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>An optional name for the template used in error messages.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>globals</code> <p>Variables that will be available to the resulting template.</p> <p> TYPE: <code>Mapping[str, object] | None</code> DEFAULT: <code>None</code> </p> Return <p>A new template bound to the default environment.</p>"},{"location":"api/convenience/#liquid2.render","title":"liquid2.render","text":"<pre><code>render(source: str, *args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Parse and render source as a Liquid template using the default environment.</p> <p>Additional arguments are passed to <code>dict()</code> and will be available as template variables.</p> PARAMETER DESCRIPTION <code>source</code> <p>Liquid template source code.</p> <p> TYPE: <code>str</code> </p> <code>*args</code> <p>dict-like arguments added to the template render context.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p>dict-like arguments added to the template render context.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Return <p>The result of rendering source as a Liquid template.</p>"},{"location":"api/convenience/#liquid2.render_async","title":"liquid2.render_async  <code>async</code>","text":"<pre><code>render_async(source: str, *args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Parse and render source as a Liquid template using the default environment.</p> <p>Additional arguments are passed to <code>dict()</code> and will be available as template variables.</p> PARAMETER DESCRIPTION <code>source</code> <p>Liquid template source code.</p> <p> TYPE: <code>str</code> </p> <code>*args</code> <p>dict-like arguments added to the template render context.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p>dict-like arguments added to the template render context.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Return <p>The result of rendering source as a Liquid template.</p>"},{"location":"api/convenience/#liquid2.extract_liquid","title":"liquid2.extract_liquid","text":"<pre><code>extract_liquid(\n    fileobj: TextIO,\n    keywords: list[str],\n    comment_tags: list[str] | None = None,\n    options: dict[object, object] | None = None,\n) -&gt; Iterator[MessageTuple]\n</code></pre> <p>A babel compatible translation message extraction method for Liquid templates.</p> <p>See https://babel.pocoo.org/en/latest/messages.html</p> <p>Keywords are the names of Liquid filters or tags operating on translatable strings. For a filter to contribute to message extraction, it must also appear as a child of a <code>FilteredExpression</code> and be a <code>TranslatableFilter</code>. Similarly, tags must produce a node that is a <code>TranslatableTag</code>.</p> <p>Where a Liquid comment contains a prefix in <code>comment_tags</code>, the comment will be attached to the translatable filter or tag immediately following the comment. Python Liquid's non-standard shorthand comments are not supported.</p> <p>Options are arguments passed to the <code>liquid.Template</code> constructor with the contents of <code>fileobj</code> as the template's source. Use <code>extract_from_template</code> to extract messages from an existing template bound to an existing environment.</p>"},{"location":"api/environment/","title":"Environment","text":""},{"location":"api/environment/#liquid2.Environment","title":"liquid2.Environment","text":"<p>Template parsing and rendering configuration.</p> <p>An <code>Environment</code> is where you might register custom tags and filters, or store global context variables that should be included with every template.</p> PARAMETER DESCRIPTION <code>loader</code> <p>A template loader from which template source text will be read when calling get_template or when rendering with the built-in <code>{% include %}</code> and <code>{% render %}</code>, among others. If <code>None</code>, the environment will be configured with an empty DictLoader.</p> <p> TYPE: <code>BaseLoader | None</code> DEFAULT: <code>None</code> </p> <code>globals</code> <p>An optional mapping of template variables that will be added to the render context of all templates rendered from the environment.</p> <p> TYPE: <code>Mapping[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>auto_escape</code> <p>If <code>True</code>, automatically escape HTML text upon output, unless the text is explicitly marked as \"safe\".</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>undefined</code> <p>The Undefined type used to represent template variables that don't exist.</p> <p> TYPE: <code>Type[Undefined]</code> DEFAULT: <code>Undefined</code> </p> <code>default_trim</code> <p>The automatic whitespace stripping mode to use. This mode can then be overridden by template authors per Liquid tag using whitespace control symbols (<code>-</code>, <code>+</code>, <code>~</code>).</p> <p> TYPE: <code>WhitespaceControl</code> DEFAULT: <code>PLUS</code> </p>"},{"location":"api/environment/#liquid2.Environment.context_depth_limit","title":"context_depth_limit  <code>class-attribute</code>","text":"<pre><code>context_depth_limit: int = 30\n</code></pre> <p>Maximum number of times a render context can be extended or wrapped before raising a <code>ContextDepthError</code>.</p>"},{"location":"api/environment/#liquid2.Environment.lexer_class","title":"lexer_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lexer_class = Lexer\n</code></pre> <p>The lexer class to use when scanning template source text.</p>"},{"location":"api/environment/#liquid2.Environment.local_namespace_limit","title":"local_namespace_limit  <code>class-attribute</code>","text":"<pre><code>local_namespace_limit: int | None = None\n</code></pre> <p>Maximum number of bytes (according to sys.getsizeof) allowed in a template's local namespace before a <code>LocalNamespaceLimitError</code> is raised. We only count the size of the namespaces values, not the size of keys/names.</p>"},{"location":"api/environment/#liquid2.Environment.loop_iteration_limit","title":"loop_iteration_limit  <code>class-attribute</code>","text":"<pre><code>loop_iteration_limit: int | None = None\n</code></pre> <p>Maximum number of loop iterations allowed before a <code>LoopIterationLimitError</code> is raised.</p>"},{"location":"api/environment/#liquid2.Environment.output_stream_limit","title":"output_stream_limit  <code>class-attribute</code>","text":"<pre><code>output_stream_limit: int | None = None\n</code></pre> <p>Maximum number of bytes that can be written to a template's output stream before raising an <code>OutputStreamLimitError</code>.</p>"},{"location":"api/environment/#liquid2.Environment.suppress_blank_control_flow_blocks","title":"suppress_blank_control_flow_blocks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suppress_blank_control_flow_blocks: bool = True\n</code></pre> <p>If True (the default), indicates that blocks rendering to whitespace only will not be output.</p>"},{"location":"api/environment/#liquid2.Environment.template_class","title":"template_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>template_class = Template\n</code></pre> <p>The template class to use after parsing source text.</p>"},{"location":"api/environment/#liquid2.Environment.from_string","title":"from_string","text":"<pre><code>from_string(\n    source: str,\n    *,\n    name: str = \"\",\n    path: str | Path | None = None,\n    globals: Mapping[str, object] | None = None,\n    overlay_data: Mapping[str, object] | None = None\n) -&gt; Template\n</code></pre> <p>Create a template from a string.</p>"},{"location":"api/environment/#liquid2.Environment.get_template","title":"get_template","text":"<pre><code>get_template(\n    name: str,\n    *,\n    globals: Mapping[str, object] | None = None,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; Template\n</code></pre> <p>Load and parse a template using the configured loader.</p> PARAMETER DESCRIPTION <code>name</code> <p>The template's name. The loader is responsible for interpreting the name. It could be the name of a file or some other identifier.</p> <p> TYPE: <code>str</code> </p> <code>globals</code> <p>A mapping of render context variables attached to the resulting template.</p> <p> TYPE: <code>Mapping[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>context</code> <p>An optional render context that can be used to narrow the template source search space.</p> <p> TYPE: <code>RenderContext | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>Arbitrary arguments that can be used to narrow the template source search space.</p> <p> TYPE: <code>object</code> DEFAULT: <code>{}</code> </p> RAISES DESCRIPTION <code>TemplateNotFound</code> <p>If a template with the given name can not be found.</p>"},{"location":"api/environment/#liquid2.Environment.get_template_async","title":"get_template_async  <code>async</code>","text":"<pre><code>get_template_async(\n    name: str,\n    *,\n    globals: Mapping[str, object] | None = None,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; Template\n</code></pre> <p>An async version of <code>get_template()</code>.</p>"},{"location":"api/environment/#liquid2.Environment.make_globals","title":"make_globals","text":"<pre><code>make_globals(\n    globals: Mapping[str, object] | None = None\n) -&gt; dict[str, object]\n</code></pre> <p>Combine environment globals with template globals.</p>"},{"location":"api/environment/#liquid2.Environment.parse","title":"parse","text":"<pre><code>parse(source: str) -&gt; list[Node]\n</code></pre> <p>Compile template source text and return an abstract syntax tree.</p>"},{"location":"api/environment/#liquid2.Environment.setup_tags_and_filters","title":"setup_tags_and_filters","text":"<pre><code>setup_tags_and_filters() -&gt; None\n</code></pre> <p>Add tags and filters to this environment.</p> <p>This is called once when initializing an environment. Override this method in your custom environments.</p>"},{"location":"api/environment/#liquid2.Environment.tokenize","title":"tokenize","text":"<pre><code>tokenize(source: str) -&gt; list[TokenT]\n</code></pre> <p>Scan Liquid template source and return a list of Markup objects.</p>"},{"location":"api/environment/#liquid2.Environment.trim","title":"trim","text":"<pre><code>trim(\n    text: str,\n    left_trim: WhitespaceControl,\n    right_trim: WhitespaceControl,\n) -&gt; str\n</code></pre> <p>Return text after applying whitespace control.</p>"},{"location":"api/loaders/","title":"Loaders","text":""},{"location":"api/loaders/#liquid2.loader.BaseLoader","title":"liquid2.loader.BaseLoader","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for all template loaders.</p>"},{"location":"api/loaders/#liquid2.loader.BaseLoader.get_source","title":"get_source  <code>abstractmethod</code>","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p> PARAMETER DESCRIPTION <code>env</code> <p>The <code>Environment</code> attempting to load the template source text.</p> <p> TYPE: <code>Environment</code> </p> <code>template_name</code> <p>A name or identifier for a template's source text.</p> <p> TYPE: <code>str</code> </p> <code>context</code> <p>An optional render context that can be used to narrow the template source search space.</p> <p> TYPE: <code>RenderContext | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>Arbitrary arguments that can be used to narrow the template source search space.</p> <p> TYPE: <code>object</code> DEFAULT: <code>{}</code> </p>"},{"location":"api/loaders/#liquid2.loader.BaseLoader.get_source_async","title":"get_source_async  <code>async</code>","text":"<pre><code>get_source_async(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>An async version of <code>get_source</code>.</p> <p>The default implementation delegates to <code>get_source()</code>.</p>"},{"location":"api/loaders/#liquid2.loader.BaseLoader.load","title":"load","text":"<pre><code>load(\n    env: Environment,\n    name: str,\n    *,\n    globals: Mapping[str, object] | None = None,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; Template\n</code></pre> <p>Find and parse template source code.</p> PARAMETER DESCRIPTION <code>env</code> <p>The <code>Environment</code> attempting to load the template source text.</p> <p> TYPE: <code>Environment</code> </p> <code>name</code> <p>A name or identifier for a template's source text.</p> <p> TYPE: <code>str</code> </p> <code>globals</code> <p>A mapping of render context variables attached to the resulting template.</p> <p> TYPE: <code>Mapping[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>context</code> <p>An optional render context that can be used to narrow the template source search space.</p> <p> TYPE: <code>RenderContext | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>Arbitrary arguments that can be used to narrow the template source search space.</p> <p> TYPE: <code>object</code> DEFAULT: <code>{}</code> </p>"},{"location":"api/loaders/#liquid2.loader.BaseLoader.load_async","title":"load_async  <code>async</code>","text":"<pre><code>load_async(\n    env: Environment,\n    name: str,\n    *,\n    globals: Mapping[str, object] | None = None,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; Template\n</code></pre> <p>An async version of <code>load()</code>.</p>"},{"location":"api/loaders/#liquid2.loader.TemplateSource","title":"liquid2.loader.TemplateSource","text":"<p>               Bases: <code>NamedTuple</code></p> <p>A Liquid template source as returned by the <code>get_source</code> method of a <code>loader</code>.</p> ATTRIBUTE DESCRIPTION <code>source</code> <p>The liquid template source code.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The liquid template file name or other string identifying its origin.</p> <p> TYPE: <code>str</code> </p> <code>uptodate</code> <p>Optional callable that will return <code>True</code> if the template is up to date, or <code>False</code> if it needs to be reloaded.</p> <p> TYPE: <code>Callable[[], bool] | Callable[[], Awaitable[bool]] | None</code> </p> <code>matter</code> <p>Optional mapping containing variables associated with the template. Could be \"front matter\" or other meta data.</p> <p> TYPE: <code>dict[str, object] | None</code> </p>"},{"location":"api/loaders/#liquid2.FileSystemLoader","title":"liquid2.FileSystemLoader","text":"<p>               Bases: <code>BaseLoader</code></p> <p>A loader that loads templates from one or more directories on the file system.</p> PARAMETER DESCRIPTION <code>search_path</code> <p>One or more paths to search.</p> <p> TYPE: <code>Union[str, Path, Iterable[Union[str, Path]]]</code> </p> <code>encoding</code> <p>Encoding to use when opening files.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'utf-8'</code> </p> <code>ext</code> <p>A default file extension. Should include a leading period.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api/loaders/#liquid2.FileSystemLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.FileSystemLoader.get_source_async","title":"get_source_async  <code>async</code>","text":"<pre><code>get_source_async(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.FileSystemLoader.resolve_path","title":"resolve_path","text":"<pre><code>resolve_path(template_name: str) -&gt; Path\n</code></pre> <p>Return a path to the template identified by template_name.</p> <p>If the search path is a list of paths, returns the first path where template_name exists. If none of the search paths contain template_name, a TemplateNotFound exception is raised.</p>"},{"location":"api/loaders/#liquid2.CachingFileSystemLoader","title":"liquid2.CachingFileSystemLoader","text":"<p>               Bases: <code>CachingLoaderMixin</code>, <code>FileSystemLoader</code></p> <p>A file system loader that caches parsed templates in memory.</p> PARAMETER DESCRIPTION <code>search_path</code> <p>One or more paths to search.</p> <p> TYPE: <code>Union[str, Path, Iterable[Union[str, Path]]]</code> </p> <code>encoding</code> <p>Open template files with the given encoding.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'utf-8'</code> </p> <code>ext</code> <p>A default file extension. Should include a leading period.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>auto_reload</code> <p>If <code>True</code>, automatically reload a cached template if it has been updated.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>namespace_key</code> <p>The name of a global render context variable or loader keyword argument that resolves to the current loader \"namespace\" or \"scope\".</p> <p>If you're developing a multi-user application, a good namespace might be <code>uid</code>, where <code>uid</code> is a unique identifier for a user and templates are arranged in folders named for each <code>uid</code> inside the search path.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>capacity</code> <p>The maximum number of templates to hold in the cache before removing the least recently used template.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p>"},{"location":"api/loaders/#liquid2.DictLoader","title":"liquid2.DictLoader","text":"<p>               Bases: <code>BaseLoader</code></p> <p>A loader that loads templates from a dictionary.</p> PARAMETER DESCRIPTION <code>templates</code> <p>A dictionary mapping template names to template source strings.</p> <p> TYPE: <code>dict[str, str]</code> </p>"},{"location":"api/loaders/#liquid2.DictLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get the source, filename and reload helper for a template.</p>"},{"location":"api/loaders/#liquid2.CachingDictLoader","title":"liquid2.CachingDictLoader","text":"<p>               Bases: <code>CachingLoaderMixin</code>, <code>DictLoader</code></p> <p>A <code>DictLoader</code> that caches parsed templates in memory.</p>"},{"location":"api/loaders/#liquid2.PackageLoader","title":"liquid2.PackageLoader","text":"<p>               Bases: <code>BaseLoader</code></p> <p>A template loader that reads templates from Python packages.</p> PARAMETER DESCRIPTION <code>package</code> <p>Import name of a package containing Liquid templates.</p> <p> TYPE: <code>Union[str, ModuleType]</code> </p> <code>package_path</code> <p>One or more directories in the package containing Liquid templates.</p> <p> TYPE: <code>Union[str, Iterable[str]]</code> DEFAULT: <code>'templates'</code> </p> <code>encoding</code> <p>Encoding of template files.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'utf-8'</code> </p> <code>ext</code> <p>A default file extension to use if one is not provided. Should include a leading period.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'.liquid'</code> </p>"},{"location":"api/loaders/#liquid2.PackageLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.PackageLoader.get_source_async","title":"get_source_async  <code>async</code>","text":"<pre><code>get_source_async(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.ChoiceLoader","title":"liquid2.ChoiceLoader","text":"<p>               Bases: <code>BaseLoader</code></p> <p>A template loader that delegates to other template loaders.</p> PARAMETER DESCRIPTION <code>loaders</code> <p>A list of loaders implementing <code>liquid.loaders.BaseLoader</code>.</p> <p> TYPE: <code>list[BaseLoader]</code> </p>"},{"location":"api/loaders/#liquid2.ChoiceLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.ChoiceLoader.get_source_async","title":"get_source_async  <code>async</code>","text":"<pre><code>get_source_async(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.CachingChoiceLoader","title":"liquid2.CachingChoiceLoader","text":"<p>               Bases: <code>CachingLoaderMixin</code>, <code>ChoiceLoader</code></p> <p>A <code>ChoiceLoader</code> that caches parsed templates in memory.</p> PARAMETER DESCRIPTION <code>loaders</code> <p>A list of loaders implementing <code>liquid.loaders.BaseLoader</code>.</p> <p> TYPE: <code>list[BaseLoader]</code> </p> <code>auto_reload</code> <p>If <code>True</code>, automatically reload a cached template if it has been updated.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>namespace_key</code> <p>The name of a global render context variable or loader keyword argument that resolves to the current loader \"namespace\" or \"scope\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>capacity</code> <p>The maximum number of templates to hold in the cache before removing the least recently used template.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p>"},{"location":"api/template/","title":"Template","text":""},{"location":"api/template/#liquid2.Template","title":"liquid2.Template","text":"<p>A parsed template ready to be rendered.</p> <p>Don't try to instantiate <code>Template</code> directly. Use <code>parse()</code>, <code>Environment.from_string()</code> or <code>Environment.get_template()</code> instead.</p>"},{"location":"api/template/#liquid2.Template.analyze","title":"analyze","text":"<pre><code>analyze(\n    *, include_partials: bool = True\n) -&gt; TemplateAnalysis\n</code></pre> <p>Statically analyze this template and any included/rendered templates.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, we will try to load partial templates and analyze those templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"api/template/#liquid2.Template.analyze_async","title":"analyze_async  <code>async</code>","text":"<pre><code>analyze_async(\n    *, include_partials: bool = True\n) -&gt; TemplateAnalysis\n</code></pre> <p>An async version of <code>analyze</code>.</p>"},{"location":"api/template/#liquid2.Template.filter_names","title":"filter_names","text":"<pre><code>filter_names(*, include_partials: bool = True) -&gt; list[str]\n</code></pre> <p>Return a list of filter names used in this template.</p>"},{"location":"api/template/#liquid2.Template.filter_names_async","title":"filter_names_async  <code>async</code>","text":"<pre><code>filter_names_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of filter names used in this template.</p>"},{"location":"api/template/#liquid2.Template.full_name","title":"full_name","text":"<pre><code>full_name() -&gt; str\n</code></pre> <p>Return this template's path, if available, joined with its name.</p>"},{"location":"api/template/#liquid2.Template.global_variable_paths","title":"global_variable_paths","text":"<pre><code>global_variable_paths(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template including all path segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variable_paths_async","title":"global_variable_paths_async  <code>async</code>","text":"<pre><code>global_variable_paths_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template including all path segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variable_segments","title":"global_variable_segments","text":"<pre><code>global_variable_segments(\n    *, include_partials: bool = True\n) -&gt; list[Segments]\n</code></pre> <p>Return a list of variables used in this template, each as a list of segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[Segments]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variable_segments_async","title":"global_variable_segments_async  <code>async</code>","text":"<pre><code>global_variable_segments_async(\n    *, include_partials: bool = True\n) -&gt; list[Segments]\n</code></pre> <p>Return a list of variables used in this template, each as a list of segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[Segments]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variables","title":"global_variables","text":"<pre><code>global_variables(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template without path segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct root segments for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variables_async","title":"global_variables_async  <code>async</code>","text":"<pre><code>global_variables_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template without path segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct root segments for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.is_up_to_date","title":"is_up_to_date","text":"<pre><code>is_up_to_date() -&gt; bool\n</code></pre> <p>Return False if the template has been modified, True otherwise.</p>"},{"location":"api/template/#liquid2.Template.is_up_to_date_async","title":"is_up_to_date_async  <code>async</code>","text":"<pre><code>is_up_to_date_async() -&gt; bool\n</code></pre> <p>An async version of is_up_to_date().</p> <p>If template.uptodate is a coroutine, it wil be awaited. Otherwise it will be called just like is_up_to_date.</p>"},{"location":"api/template/#liquid2.Template.make_globals","title":"make_globals","text":"<pre><code>make_globals(\n    render_args: Mapping[str, object]\n) -&gt; Mapping[str, object]\n</code></pre> <p>Return a mapping including render arguments and template globals.</p>"},{"location":"api/template/#liquid2.Template.render","title":"render","text":"<pre><code>render(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Render this template with args and kwargs added to the render context.</p> <p>args and kwargs are passed to <code>dict()</code>.</p>"},{"location":"api/template/#liquid2.Template.render_async","title":"render_async  <code>async</code>","text":"<pre><code>render_async(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Render this template with args and kwargs added to the render context.</p> <p>args and kwargs are passed to <code>dict()</code>.</p>"},{"location":"api/template/#liquid2.Template.render_with_context","title":"render_with_context","text":"<pre><code>render_with_context(\n    context: RenderContext,\n    buf: TextIO,\n    *args: Any,\n    partial: bool = False,\n    block_scope: bool = False,\n    **kwargs: Any\n) -&gt; int\n</code></pre> <p>Render this template using an existing render context and output buffer.</p>"},{"location":"api/template/#liquid2.Template.render_with_context_async","title":"render_with_context_async  <code>async</code>","text":"<pre><code>render_with_context_async(\n    context: RenderContext,\n    buf: TextIO,\n    *args: Any,\n    partial: bool = False,\n    block_scope: bool = False,\n    **kwargs: Any\n) -&gt; int\n</code></pre> <p>Render this template using an existing render context and output buffer.</p>"},{"location":"api/template/#liquid2.Template.tag_names","title":"tag_names","text":"<pre><code>tag_names(*, include_partials: bool = True) -&gt; list[str]\n</code></pre> <p>Return a list of tag names used in this template.</p>"},{"location":"api/template/#liquid2.Template.tag_names_async","title":"tag_names_async  <code>async</code>","text":"<pre><code>tag_names_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of tag names used in this template.</p>"},{"location":"api/template/#liquid2.Template.variable_paths","title":"variable_paths","text":"<pre><code>variable_paths(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template including all path segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variable_paths.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variable_paths_async","title":"variable_paths_async  <code>async</code>","text":"<pre><code>variable_paths_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template including all path segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variable_paths.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variable_segments","title":"variable_segments","text":"<pre><code>variable_segments(\n    *, include_partials: bool = True\n) -&gt; list[Segments]\n</code></pre> <p>Return a list of variables used in this template, each as a list of segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variable_segments.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[Segments]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variable_segments_async","title":"variable_segments_async  <code>async</code>","text":"<pre><code>variable_segments_async(\n    *, include_partials: bool = True\n) -&gt; list[Segments]\n</code></pre> <p>Return a list of variables used in this template, each as a list of segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variable_segments.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[Segments]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variables","title":"variables","text":"<pre><code>variables(*, include_partials: bool = True) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template without path segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variables.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct root segments for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variables_async","title":"variables_async  <code>async</code>","text":"<pre><code>variables_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template without path segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variables.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct root segments for variables in this template.</p>"},{"location":"api/template/#liquid2.static_analysis.TemplateAnalysis","title":"liquid2.static_analysis.TemplateAnalysis  <code>dataclass</code>","text":"<p>The result of analyzing a template using <code>Template.analyze()</code>.</p> PARAMETER DESCRIPTION <code>variables</code> <p>All referenced variables, whether they are in scope or not. Including references to names such as <code>forloop</code> from the <code>for</code> tag.</p> <p> TYPE: <code>dict[str, list[Variable]]</code> </p> <code>locals</code> <p>Template variables that are added to the template local scope, whether they are subsequently used or not.</p> <p> TYPE: <code>dict[str, list[Variable]]</code> </p> <code>globals</code> <p>Template variables that, on the given line number and \"file\", are out of scope or are assumed to be \"global\". That is, expected to be included by the application developer rather than a template author.</p> <p> TYPE: <code>dict[str, list[Variable]]</code> </p> <code>filters</code> <p>All filters found during static analysis.</p> <p> TYPE: <code>dict[str, list[Span]]</code> </p> <code>tags</code> <p>All tags found during static analysis.</p> <p> TYPE: <code>dict[str, list[Span]]</code> </p>"},{"location":"api/template/#liquid2.static_analysis.Variable","title":"liquid2.static_analysis.Variable  <code>dataclass</code>","text":"<p>A variable as sequence of segments that make up its path and its location.</p> <p>Variables with the same segments compare equal, regardless of span.</p>"},{"location":"api/template/#liquid2.static_analysis.Span","title":"liquid2.static_analysis.Span  <code>dataclass</code>","text":"<p>The location of a variable, tag or filter in a template.</p>"},{"location":"api/tokens/","title":"Tokens","text":""},{"location":"api/tokens/#liquid2.token.TokenT","title":"liquid2.token.TokenT  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>The base class for all tokens.</p>"},{"location":"api/tokens/#liquid2.token.TokenT.start","title":"start  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>start: int\n</code></pre> <p>The start position of this token.</p>"},{"location":"api/tokens/#liquid2.token.TokenT.stop","title":"stop  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>stop: int\n</code></pre> <p>The end position of this token.</p>"},{"location":"api/tokens/#liquid2.token.TokenType","title":"liquid2.token.TokenType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/tokens/#liquid2.token.BlockCommentToken","title":"liquid2.token.BlockCommentToken  <code>dataclass</code>","text":"<p>               Bases: <code>CommentToken</code></p> <p>A token representing a block comment.</p> <p>That's one with a start and end tag.</p>"},{"location":"api/tokens/#liquid2.token.CommentToken","title":"liquid2.token.CommentToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing a comment.</p>"},{"location":"api/tokens/#liquid2.token.ContentToken","title":"liquid2.token.ContentToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing template text content that is not markup.</p>"},{"location":"api/tokens/#liquid2.token.ErrorToken","title":"liquid2.token.ErrorToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing a syntax error found by the lexer.</p>"},{"location":"api/tokens/#liquid2.token.ErrorToken.start","title":"start  <code>property</code>","text":"<pre><code>start: int\n</code></pre> <p>Return the start position of this token.</p>"},{"location":"api/tokens/#liquid2.token.ErrorToken.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: int\n</code></pre> <p>Return the end position of this token.</p>"},{"location":"api/tokens/#liquid2.token.InlineCommentToken","title":"liquid2.token.InlineCommentToken  <code>dataclass</code>","text":"<p>               Bases: <code>CommentToken</code></p> <p>A token representing an inline comment tag.</p> <p>That's one with <code>#</code> as the tag name. Like <code>{% # some comment %}</code>.</p>"},{"location":"api/tokens/#liquid2.token.LinesToken","title":"liquid2.token.LinesToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing line statements, where each line is a tag expression.</p> <p>The built-in <code>{% liquid %}</code> tag is an example of a tag that uses line statements.</p>"},{"location":"api/tokens/#liquid2.token.OutputToken","title":"liquid2.token.OutputToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing an output statement.</p>"},{"location":"api/tokens/#liquid2.token.PathToken","title":"liquid2.token.PathToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing the path to a variable.</p>"},{"location":"api/tokens/#liquid2.token.RangeToken","title":"liquid2.token.RangeToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing a range expression.</p> <p>For example, <code>(1..3)</code>.</p>"},{"location":"api/tokens/#liquid2.token.RawToken","title":"liquid2.token.RawToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing raw content that should be treated as plain text.</p>"},{"location":"api/tokens/#liquid2.token.TagToken","title":"liquid2.token.TagToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing a tag.</p> <p>This could be an inline tag, or the start or end of a block tag.</p>"},{"location":"api/tokens/#liquid2.token.Token","title":"liquid2.token.Token  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A liquid expression token.</p>"},{"location":"api/tokens/#liquid2.token.Token.start","title":"start  <code>property</code>","text":"<pre><code>start: int\n</code></pre> <p>Return the start position of this token.</p>"},{"location":"api/tokens/#liquid2.token.Token.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: int\n</code></pre> <p>Return the end position of this token.</p>"},{"location":"api/tokens/#liquid2.token.is_comment_token","title":"liquid2.token.is_comment_token","text":"<pre><code>is_comment_token(token: TokenT) -&gt; TypeGuard[CommentToken]\n</code></pre> <p>A CommentToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_content_token","title":"liquid2.token.is_content_token","text":"<pre><code>is_content_token(token: TokenT) -&gt; TypeGuard[ContentToken]\n</code></pre> <p>A ContentToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_lines_token","title":"liquid2.token.is_lines_token","text":"<pre><code>is_lines_token(token: TokenT) -&gt; TypeGuard[LinesToken]\n</code></pre> <p>A LinesToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_output_token","title":"liquid2.token.is_output_token","text":"<pre><code>is_output_token(token: TokenT) -&gt; TypeGuard[OutputToken]\n</code></pre> <p>An OutputToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_path_token","title":"liquid2.token.is_path_token","text":"<pre><code>is_path_token(token: TokenT) -&gt; TypeGuard[PathToken]\n</code></pre> <p>A PathToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_range_token","title":"liquid2.token.is_range_token","text":"<pre><code>is_range_token(token: TokenT) -&gt; TypeGuard[RangeToken]\n</code></pre> <p>A RangeToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_raw_token","title":"liquid2.token.is_raw_token","text":"<pre><code>is_raw_token(token: TokenT) -&gt; TypeGuard[RawToken]\n</code></pre> <p>A RawToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_tag_token","title":"liquid2.token.is_tag_token","text":"<pre><code>is_tag_token(token: TokenT) -&gt; TypeGuard[TagToken]\n</code></pre> <p>A TagToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_token_type","title":"liquid2.token.is_token_type","text":"<pre><code>is_token_type(\n    token: TokenT, t: TokenType\n) -&gt; TypeGuard[Token]\n</code></pre> <p>A Token type guard.</p>"},{"location":"api/undefined/","title":"Undefined","text":""},{"location":"api/undefined/#liquid2.undefined.Undefined","title":"liquid2.undefined.Undefined","text":"<p>               Bases: <code>Mapping[Any, object]</code></p> <p>The default undefined type.</p> <p>Always evaluates to an empty string. Can be iterated over and indexed without error.</p>"},{"location":"api/undefined/#liquid2.undefined.Undefined.poke","title":"poke","text":"<pre><code>poke() -&gt; bool\n</code></pre> <p>Prod the type, giving it the opertunity to raise an exception.</p>"},{"location":"api/undefined/#liquid2.undefined.StrictUndefined","title":"liquid2.undefined.StrictUndefined","text":"<p>               Bases: <code>Undefined</code></p> <p>An undefined that raises an exception for everything other than <code>repr</code>.</p>"},{"location":"api/undefined/#liquid2.undefined.DebugUndefined","title":"liquid2.undefined.DebugUndefined","text":"<p>               Bases: <code>Undefined</code></p> <p>An undefined that returns debug information when rendered.</p>"}]}