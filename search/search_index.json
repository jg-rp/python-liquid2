{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Liquid2","text":"<p>Liquid is a template language, where source text (the template) contains placeholders for variables, conditional expressions for including or excluding blocks of text, and loops for repeating blocks of text. Plus other syntax for manipulating variables and combining multiple templates into a single output.</p> <p>Python Liquid2 is a flexible, non-evaluating Liquid template engine. We cater for situations where templates change and grow with an application's user base, and the authors of those templates are potentially untrusted.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Flexible: Add to, remove or replace built-in tags and filters to suite your needs. Also choose from several built-in template loaders or define your own custom template loader.</p> </li> <li> <p>Asynchronous: For situations where you have too many templates to fit in memory or those templates change frequently, they can be loaded asynchronously from file systems, databases or over a network. Similarly, template data can be fetch lazily at render time, also asynchronously.</p> </li> <li> <p>Template inheritance: Python Liquid2 has built-in template inheritance features. As well and including or rendering a partial template, you can extend parent templates by defining template blocks.</p> </li> <li> <p>Static analysis: Python Liquid2 exposes a syntax tree for each template and built-in tools for analyzing tag, filter and variable usage. You can also extract comment text and have the option of loading and analyzing included/rendered/extended templates too.</p> </li> <li> <p>Internationalization and localization: Templates have built-in support for translator comments and extracting message catalogs, plus filters for formatting currency, dates, times and numbers for international users.</p> </li> <li> <p>Compatible: Python Liquid2 is backwards compatible with Shopify/Liquid, the original authors of the Liquid template language, with a few exceptions.</p> </li> </ul>"},{"location":"#get-started","title":"Get started","text":"<p>Have a look at the quick start guide and browse through the built-in tags and filters.</p> <p>If you're coming from Python Liquid version 1, check out the migration guide.</p>"},{"location":"babel/","title":"Internationalization and localization","text":""},{"location":"babel/#message-catalogs","title":"Message catalogs","text":"<p>TODO</p>"},{"location":"conventions/","title":"Conventions","text":"<p>Throughout this documentation we use icons to indicate if a feature is experimental, compatible with shopify and what version it was introduced.</p>"},{"location":"conventions/#version","title":"\u2013 Version","text":"<p>Shows the minimum version of Liquid2 that is required to use a feature.</p>"},{"location":"conventions/#shopify","title":"\u2013 Shopify/Liquid compatible","text":"<p>Indicates that the feature or example code is compatible with Shopify/Liquid.</p>"},{"location":"conventions/#liquid2","title":"\u2013 New to Liquid2","text":"<p>Indicates that the feature or example code is new to Liquid2 and not compatible with Shopify/Liquid.</p>"},{"location":"conventions/#compatibility","title":"\u2013 Compatibility warning","text":"<p>Indicates that the example code is not 100% compatible with Shopify/Liquid.</p>"},{"location":"environment/","title":"Liquid environments","text":"<p>Template parsing and rendering behavior is configured using an instance of <code>Environment</code>. Once configured, you'd parse templates with <code>Environment.from_string()</code> or <code>Environment.get_template()</code>, both of which return an instance of <code>Template</code>.</p>"},{"location":"environment/#the-default-environment","title":"The default environment","text":"<p>The default environment, <code>liquid2.DEFAULT_ENVIRONMENT</code>, and an instance of <code>Environment</code> without any arguments are equivalent to the following <code>Environment</code> subclass and constructor arguments.</p> <pre><code>from liquid2 import DictLoader\nfrom liquid2 import Environment\nfrom liquid2 import Template\nfrom liquid2 import Undefined\nfrom liquid2 import WhitespaceControl\nfrom liquid2.builtin import register_default_tags_and_filters\nfrom liquid2.lexer import Lexer\n\nclass MyLiquidEnvironment(Environment):\n    context_depth_limit = 30\n    loop_iteration_limit = None\n    loop_namespace_limit = None\n    output_stream_limit = None\n    suppress_blank_control_flow_blocks = True\n    lexer_class = Lexer\n    template_class = Template\n\n    def setup_tags_and_filters(self):\n        register_default_tags_and_filters(self)\n\n\nenv = MyLiquidEnvironment(\n    loader=DictLoader(),\n    globals=None,\n    auto_escape=False,\n    undefined=Undefined,\n    default_trim=WhitespaceControl.PLUS\n)\n</code></pre>"},{"location":"environment/#managing-tags-and-filters","title":"Managing tags and filters","text":"<p>As you'd expect, <code>register_default_tags_and_filters()</code> registers all the default tags and filters with the environment. You are encouraged to override <code>setup_tags_and_filters()</code> in your <code>Environment</code> subclasses to add optional or custom tags and filters, remove unwanted default tags and filters, and possibly replace default implementation with your own.</p> <p>It's also OK to manipulate <code>Environment.tags</code> and <code>Environment.filters</code> directly after an <code>Environment</code> instance has been created. They are just dictionaries mapping tag names to instances of <code>Tag</code> and filter names to callables, respectively.</p> <pre><code>from liquid2 import Environment\n\nenv = Environment()\ndel env.tags[\"include\"]\n</code></pre>"},{"location":"environment/#managing-global-variables","title":"Managing global variables","text":"<p>By default, global template variables attached to instances of <code>Template</code> take priority over global template variables attached to an <code>Environment</code>. You can change this priority or otherwise manipulate the <code>globals</code> dictionary for a <code>Template</code> by overriding <code>Environment.make_globals()</code>.</p> <pre><code>from typing import Mapping\nfrom liquid2 import Environment\n\nclass MyLiquidEnvironment(Environment):\n\n    def make_globals(\n        self,\n        globals: Mapping[str, object] | None = None,\n    ) -&gt; dict[str, object]:\n        \"\"\"Combine environment globals with template globals.\"\"\"\n        if globals:\n            # Template globals take priority over environment globals.\n            return {**self.globals, **globals}\n        return dict(self.globals)\n</code></pre>"},{"location":"environment/#customizing-whitespace-control","title":"Customizing whitespace control","text":"<p><code>Environment.trim()</code> is called when stripping whitespace from template content according to tag whitespace control characters (<code>-</code>, <code>+</code> and <code>~</code>). By default, <code>-</code> will trim all whitespace, <code>+</code> will retain all whitespace regardless of <code>Environment.default_trim</code>, and <code>~</code> will remove only <code>\\r</code> and <code>\\n</code> characters.</p> <p>Override <code>Environment.trim()</code> to define your own whitespace control behavior.</p> <pre><code>from liquid2 import Environment\nfrom liquid2 import WhitespaceControl\n\nclass MyLiquidEnvironment(Environment):\n\n    def trim(\n        self,\n        text: str,\n        left_trim: WhitespaceControl,\n        right_trim: WhitespaceControl,\n    ) -&gt; str:\n        \"\"\"Return _text_ after applying whitespace control.\"\"\"\n        if left_trim == WhitespaceControl.DEFAULT:\n            left_trim = self.default_trim\n\n        if right_trim == WhitespaceControl.DEFAULT:\n            right_trim = self.default_trim\n\n        if left_trim == right_trim:\n            if left_trim == WhitespaceControl.MINUS:\n                return text.strip()\n            if left_trim == WhitespaceControl.TILDE:\n                return text.strip(\"\\r\\n\")\n            return text\n\n        if left_trim == WhitespaceControl.MINUS:\n            text = text.lstrip()\n        elif left_trim == WhitespaceControl.TILDE:\n            text = text.lstrip(\"\\r\\n\")\n\n        if right_trim == WhitespaceControl.MINUS:\n            text = text.rstrip()\n        elif right_trim == WhitespaceControl.TILDE:\n            text = text.rstrip(\"\\r\\n\")\n\n        return text\n</code></pre>"},{"location":"environment/#whats-next","title":"What's next?","text":"<p>See loading templates for more information about configuring a template loader, and undefined variables for information about managing undefined variables.</p>"},{"location":"filter_reference/","title":"Default filters","text":"<p>All the filters described here are enabled by default in Python Liquid2.</p>"},{"location":"filter_reference/#abs","title":"abs","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | abs\n</code></pre> <p>Return the absolute value of a number. Works on integers, floats and string representations of integers or floats.</p> <pre><code>{{ -42 | abs }}\n{{ 7.5 | abs }}\n{{ '42.0' | abs }}\n</code></pre> output<pre><code>42\n7.5\n42.0\n</code></pre> <p>Given a value that can't be cast to an integer or float, <code>0</code> will be returned.</p> <pre><code>{{ 'hello' | abs }}\n{{ nosuchthing | abs }}\n</code></pre> output<pre><code>0\n0\n</code></pre>"},{"location":"filter_reference/#append","title":"append","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | append: &lt;string&gt;\n</code></pre> <p>Return the input value concatenated with the argument value.</p> <pre><code>{{ 'Hello, ' | append: 'World!' }}\n</code></pre> output<pre><code>Hello, World!\n</code></pre> <p>If either the input value or argument are not a string, they will be coerced to a string before concatenation.</p> <pre><code>{% assign a_number = 7.5 -%}\n{{ 42 | append: a_number }}\n{{ nosuchthing | append: 'World!' }}\n</code></pre> output<pre><code>427.5\nWorld!\n</code></pre>"},{"location":"filter_reference/#at_least","title":"at_least","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | at_least: &lt;number&gt;\n</code></pre> <p>Return the maximum of the filter's input value and its argument. If either input value or argument are string representations of an integer or float, they will be cast to an integer or float prior to comparison.</p> <pre><code>{{ -5.1 | at_least: 8 }}\n{{ 8 | at_least: '5' }}\n</code></pre> output<pre><code>8\n8\n</code></pre> <p>If either input value or argument can not be cast to an integer or float, <code>0</code> will be used instead.</p> <pre><code>{{ \"hello\" | at_least: 2 }}\n{{ \"hello\" | at_least: -2 }}\n{{ -1 | at_least: \"abc\" }}\n</code></pre> output<pre><code>2\n0\n0\n</code></pre>"},{"location":"filter_reference/#at_most","title":"at_most","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | at_most: &lt;number&gt;\n</code></pre> <p>Return the minimum of the filter's input value and its argument. If either input value or argument are string representations of an integer or float, they will be cast to an integer or float prior to comparison.</p> <pre><code>{{ 5 | at_most: 8 }}\n{{ '8' | at_most: 5 }}\n</code></pre> output<pre><code>5\n5\n</code></pre> <p>If either input value or argument can not be cast to an integer or float, <code>0</code> will be used instead.</p> <pre><code>{{ \"hello\" | at_most: 2 }}\n{{ \"hello\" | at_most: -2 }}\n{{ -1 | at_most: \"abc\" }}\n</code></pre> output<pre><code>0\n-2\n-1\n</code></pre>"},{"location":"filter_reference/#capitalize","title":"capitalize","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | capitalize\n</code></pre> <p>Return the input string with the first character in upper case and the rest lowercase.</p> <pre><code>{{ 'heLLO, World!' | capitalize }}\n</code></pre> output<pre><code>Hello, world!\n</code></pre> <p>If the input value is not a string, it will be converted to a string.</p> <pre><code>{{ 42 | capitalize }}\n</code></pre> output<pre><code>42\n</code></pre>"},{"location":"filter_reference/#ceil","title":"ceil","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | ceil\n</code></pre> <p>Round the input value up to the nearest whole number. The input value will be converted to a number if it is not an integer or float.</p> <pre><code>{{ 5.1 | ceil }}\n{{ 5.0 | ceil }}\n{{ 5 | ceil }}\n{{ '5.4' | ceil }}\n</code></pre> output<pre><code>6\n5\n5\n5\n</code></pre> <p>If the input is undefined or can't be converted to a number, <code>0</code> is returned.</p> <pre><code>{{ 'hello' | ceil }}\n{{ nosuchthing | ceil }}\n</code></pre> output<pre><code>0\n0\n</code></pre>"},{"location":"filter_reference/#compact","title":"compact","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | compact[: &lt;string&gt;]\n</code></pre> <p>Remove <code>nil</code>/<code>null</code> (or <code>None</code> in Python) values from an array-like object. If given, the argument should be the name of a property that exists on each item (hash, dict etc.) in the array-like sequence.</p> <p>For example, ff <code>pages</code> is an array of objects, some of which have a <code>category</code> property:</p> data<pre><code>{\n  \"pages\": [\n    { \"category\": \"business\" },\n    { \"category\": \"celebrities\" },\n    {},\n    { \"category\": \"lifestyle\" },\n    { \"category\": \"sports\" },\n    {},\n    { \"category\": \"technology\" }\n  ]\n}\n</code></pre> <p>Without <code>compact</code>, iterating those categories will include <code>nil</code>/<code>null</code> values.</p> <pre><code>{% assign categories = pages | map: \"category\" -%}\n\n{% for category in categories -%}\n- {{ category }}\n{%- endfor %}\n</code></pre> output<pre><code>- business\n- celebrities\n-\n- lifestyle\n- sports\n-\n- technology\n</code></pre> <p>With <code>compact</code>, we can remove those missing categories before the loop.</p> <pre><code>{% assign categories = pages | map: \"category\" | compact %}\n\n{% for category in categories %}\n- {{ category }}\n{% endfor %}\n</code></pre> output<pre><code>- business\n- celebrities\n- lifestyle\n- sports\n- technology\n</code></pre> <p>Using the optional argument to <code>compact</code>, we could avoid using <code>map</code> and create an array of pages with a <code>category</code> property, rather than an array of categories.</p> <pre><code>{% assign pages_with_category = pages | compact: \"category\" %}\n\n{% for page in pages_with_category %}\n- {{ page.category }}\n{% endfor %}\n</code></pre> output<pre><code>- business\n- celebrities\n- lifestyle\n- sports\n- technology\n</code></pre>"},{"location":"filter_reference/#concat","title":"concat","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | concat: &lt;array&gt;\n</code></pre> <p>Create a new array by joining one array-like object with another.</p> <pre><code>{% assign fruits = \"apples, oranges, peaches\" | split: \", \" %}\n{% assign vegetables = \"carrots, turnips, potatoes\" | split: \", \" %}\n\n{% assign everything = fruits | concat: vegetables %}\n\n{% for item in everything %}\n- {{ item }}\n{% endfor %}\n</code></pre> output<pre><code>- apples\n- oranges\n- peaches\n- carrots\n- turnips\n- potatoes\n</code></pre> <p>If the input value is not array-like, it will be converted to an array. No conversion is attempted for the argument value.</p> <pre><code>{% assign fruits = \"apples, oranges, peaches\" | split: \", \" -%}\n{% assign things = \"hello\" | concat: fruits -%}\n\n{% for item in things -%}\n- {{ item }}\n{% endfor %}\n</code></pre> <p>Warning</p> <p> Python Liquid2 treats strings as sequences, implicitly converting <code>\"hello\"</code> to <code>[\"h\", \"e\", \"l\", \"l\", \"o\"]</code> in this example. Whereas Shopify/Liquid would convert <code>\"hello\"</code> to <code>[\"hello\"]</code>.</p> output<pre><code>- h\n- e\n- l\n- l\n- o\n- apples\n- oranges\n- peaches\n</code></pre> <p>If the input is a nested array, it will be flattened before concatenation. The argument is not flattened.</p> data<pre><code>{\n  \"a\": [\n    [\"a\", \"x\"],\n    [\"b\", [\"y\", [\"z\"]]]\n  ],\n  \"b\": [\"c\", \"d\"]\n}\n</code></pre> <pre><code>{{ a | concat: b | join: '#' }}\n</code></pre> output<pre><code>a#x#b#y#z#c#d\n</code></pre>"},{"location":"filter_reference/#currency","title":"currency","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | currency[: group_separator: &lt;boolean&gt;] -&gt; &lt;string&gt;\n</code></pre> <p>Currency (aka money) formatting. Return the input number formatted as currency for the current locale.</p> <pre><code>{{ 100457.99 | currency }}\n</code></pre> output<pre><code>$100,457.99\n</code></pre> <p>Use the <code>group_separator</code> argument to control the output of the current locale's group separators.</p> <pre><code>{{ 100457.99 | currency: group_separator: false }}\n</code></pre> output<pre><code>$100457.99\n</code></pre> <p>If the input number is a string, it will be parsed to a decimal according to the current input locale.</p> <pre><code>{% with input_locale: \"de\", locale: \"en_CA\" %}\n  {{ \"100.457,99\" | currency }}\n{% endwith %}\n</code></pre> output<pre><code>US$100,457.99\n</code></pre>"},{"location":"filter_reference/#date","title":"date","text":"<p>0.1.0 </p> <pre><code>&lt;datetime&gt; | date: &lt;string&gt;\n</code></pre> <p>Format a date and/or time according the the given format string. The input can be a string, in which case the string will be parsed as a date/time before formatting.</p> <p>Warning</p> <p>Python Liquid uses dateutil for parsing strings to <code>datetimes</code>, and <code>strftime</code> for formatting. There are likely to be some inconsistencies between this and Ruby Liquid's Time.parse equivalent parsing and formatting of dates and times.</p> <p>In general, Python Liquid will raise an exception if the input value can not be converted to a date and/or time. Whereas Ruby Liquid will usually return something without erroring.</p> <pre><code>{{ \"March 14, 2016\" | date: \"%b %d, %y\" }}\n</code></pre> output<pre><code>Mar 14, 16\n</code></pre> <p>The special <code>'now'</code> or <code>'today'</code> input values can be used to get the current timestamp. <code>'today'</code> is an alias for <code>'now'</code>. Both include time information.</p> <pre><code>{{ \"now\" | date: \"%Y-%m-%d %H:%M\" }}\n</code></pre> output<pre><code>2021-12-02 10:17\n</code></pre> <p>If the input is undefined, an empty string is returned.</p> <pre><code>{{ nosuchthing | date: \"%Y-%m-%d %H:%M\" }}\n</code></pre> output<pre><code>\n</code></pre>"},{"location":"filter_reference/#datetime","title":"datetime","text":"<p>0.1.0 </p> <pre><code>&lt;datetime&gt; | datetime[: format: &lt;string&gt;] -&gt; &lt;string&gt;\n</code></pre> <p>Date and time formatting. Return the input datetime formatted according to the current locale. If <code>dt</code> is a <code>datetime.datetime</code> object <code>datetime.datetime(2007, 4, 1, 15, 30)</code>.</p> <pre><code>{{ dt | datetime }}\n</code></pre> output<pre><code>Apr 1, 2007, 3:30:00 PM\n</code></pre> <p>The optional <code>format</code> argument can be one of <code>'short'</code>, <code>'medium'</code>, <code>'long'</code>, <code>'full'</code> or a custom format string. <code>format</code> defaults to <code>'medium'</code>.</p> <pre><code>{% with timezone: 'America/New_York' %}\n  {{ dt | datetime: format: 'full' }}\n{% endwith %}\n</code></pre> output<pre><code>Sunday, April 1, 2007 at 11:30:00 AM Eastern Daylight Time\n</code></pre> <p>If the input datetime is a string, it will be parsed to a datetime object.</p> <pre><code>{% with locale: 'en_GB' %}\n  {{ \"Apr 1, 2007, 3:30:00 PM UTC+4\" | datetime: format: 'short' }}\n{% endwith %}\n</code></pre> output<pre><code>01/04/2007, 19:30\n</code></pre>"},{"location":"filter_reference/#decimal","title":"decimal","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | decimal[: group_separator: &lt;boolean&gt;] -&gt; &lt;string&gt;\n</code></pre> <p>Decimal number formatting. Return the input number formatted as a decimal for the current locale.</p> <pre><code>{{ '10000.233' | decimal }}\n</code></pre> output<pre><code>10,000.233\n</code></pre> <p>Use the <code>group_separator</code> argument to control the output of the current locale's group separators.</p> <pre><code>{{ '10000.233' | decimal: group_separator: false }}\n</code></pre> output<pre><code>10000.233\n</code></pre> <p>If the input number is a string, it will be parsed to a decimal according to the current input locale.</p> <pre><code>{% with input_locale: \"de\" %}\n  {{ \"100.457,00\" | decimal }}\n{% endwith %}\n</code></pre> output<pre><code>100,457\n</code></pre>"},{"location":"filter_reference/#default","title":"default","text":"<p>0.1.0 </p> <pre><code>&lt;expression&gt; | default[: &lt;object&gt;[, allow_false:&lt;bool&gt;]]\n</code></pre> <p>Return a default value if the input is undefined, <code>nil</code>/<code>null</code>, <code>false</code> or empty, or return the input unchanged otherwise.</p> <pre><code>{{ product_price | default: 2.99 }}\n\n{%- assign product_price = \"\" %}\n{{ product_price | default: 2.99 }}\n\n{%- assign product_price = 4.99 %}\n{{ product_price | default: 2.99 }}\n</code></pre> output<pre><code>2.99\n2.99\n4.99\n</code></pre> <p>If the optional <code>allow_false</code> argument is <code>true</code>, an input of <code>false</code> will not return the default. <code>allow_false</code> defaults to <code>false</code>.</p> <pre><code>{% assign product_reduced = false -%}\n{{ product_reduced | default: true, allow_false: true }}\n</code></pre> output<pre><code>false\n</code></pre> <p>If no argument is given, the default value will be an empty string.</p> <pre><code>{{ product_price | default }}\n</code></pre> output<pre><code>\n</code></pre> <p>Empty strings, arrays and objects all cause the default value to be returned. <code>0</code> does not.</p> <pre><code>{{ \"\" | default: \"hello\" }}\n{{ 0 | default: 99 }}\n</code></pre> output<pre><code>hello\n0\n</code></pre>"},{"location":"filter_reference/#divided_by","title":"divided_by","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | divided_by: &lt;number&gt;\n</code></pre> <p>Divide a number by another number. The result is rounded down to the nearest integer if the divisor is an integer.</p> <pre><code>{{ 16 | divided_by: 4 }}\n{{ 5 | divided_by: 3 }}\n</code></pre> output<pre><code>4\n1\n</code></pre> <p>If you divide by a float, the result will be a float.</p> <pre><code>{{ 20 | divided_by: 7 }}\n{{ 20 | divided_by: 7.0 }}\n</code></pre> output<pre><code>2\n2.857142857142857\n</code></pre> <p>If either the input or argument are not an integer or float, Liquid will try to convert them to an integer or float. If the input can't be converted, <code>0</code> will be used instead. If the argument can't be converted, an exception is raised.</p> <pre><code>{{ \"20\" | divided_by: \"7\" }}\n{{ \"hello\" | divided_by: 2 }}\n</code></pre> output<pre><code>2\n0\n</code></pre>"},{"location":"filter_reference/#downcase","title":"downcase","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | downcase\n</code></pre> <p>Return the input string with all characters in lowercase.</p> <pre><code>{{ 'Hello, World!' | downcase }}\n</code></pre> output<pre><code>hello, world!\n</code></pre> <p>If the input is not a string, Liquid will convert it to a string before forcing characters to lowercase.</p> <pre><code>{{ 5 | downcase }}\n</code></pre> output<pre><code>5\n</code></pre> <p>If the input is undefined, an empty string is returned.</p>"},{"location":"filter_reference/#escape","title":"escape","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | escape\n</code></pre> <p>Return the input string with characters <code>&amp;</code>, <code>&lt;</code> and <code>&gt;</code> converted to HTML-safe sequences.</p> <pre><code>{{ \"Have you read 'James &amp; the Giant Peach'?\" | escape }}\n</code></pre> output<pre><code>Have you read &amp;#39;James &amp;amp; the Giant Peach&amp;#39;?\n</code></pre>"},{"location":"filter_reference/#escape_once","title":"escape_once","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | escape_once\n</code></pre> <p>Return the input string with characters <code>&amp;</code>, <code>&lt;</code> and <code>&gt;</code> converted to HTML-safe sequences while preserving existing HTML escape sequences.</p> <pre><code>{{ \"Have you read 'James &amp;amp; the Giant Peach'?\" | escape_once }}\n</code></pre> output<pre><code>Have you read &amp;#39;James &amp;amp; the Giant Peach&amp;#39;?\n</code></pre>"},{"location":"filter_reference/#first","title":"first","text":"<p>0.1.0 </p> <pre><code>&lt;sequence&gt; | first\n</code></pre> <p>Return the first item of the input sequence. The input could be array-like or a mapping, but not a string.</p> <pre><code>{{ \"Ground control to Major Tom.\" | split: \" \" | first }}\n</code></pre> output<pre><code>Ground\n</code></pre> <p>If the input sequence is undefined, empty or not a sequence, <code>nil</code> is returned.</p>"},{"location":"filter_reference/#floor","title":"floor","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | floor\n</code></pre> <p>Return the input down to the nearest whole number. Liquid tries to convert the input to a number before the filter is applied.</p> <pre><code>{{ 1.2 | floor }}\n{{ 2.0 | floor }}\n{{ 183.357 | floor }}\n{{ -5.4 | floor }}\n{{ \"3.5\" | floor }}\n</code></pre> output<pre><code>1\n2\n183\n-6\n3\n</code></pre> <p>If the input can't be converted to a number, <code>0</code> is returned.</p>"},{"location":"filter_reference/#gettext","title":"gettext","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | gettext[: &lt;identifier&gt;: &lt;object&gt; ... ]\n</code></pre> <p>Return the localized translation of the input message without pluralization or message context.</p> <pre><code>{{ \"Hello, World!\" | gettext }}\n</code></pre> output<pre><code>Hallo Welt!\n</code></pre> <p>Any keyword arguments are used to populate message variables. If <code>user.name</code> is <code>\"Sue\"</code>:</p> <pre><code>{{ \"Hello, %(you)s\" | gettext: you: user.name }}\n</code></pre> output<pre><code>Hallo Sue!\n</code></pre>"},{"location":"filter_reference/#join","title":"join","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | join[: &lt;string&gt;]\n</code></pre> <p>Return the items in the input array as a single string, separated by the argument string. If the input is not an array, Liquid will convert it to one. If input array items are not strings, they will be converted to strings before joining.</p> <pre><code>{% assign beatles = \"John, Paul, George, Ringo\" | split: \", \" -%}\n\n{{ beatles | join: \" and \" }}\n</code></pre> output<pre><code>John and Paul and George and Ringo\n</code></pre> <p>If an argument string is not given, it defaults to a single space.</p> <pre><code>{% assign beatles = \"John, Paul, George, Ringo\" | split: \", \" -%}\n\n{{ beatles | join }}\n</code></pre> output<pre><code>John Paul George Ringo\n</code></pre>"},{"location":"filter_reference/#json","title":"json","text":"<p>0.1.0 </p> <pre><code>&lt;object&gt; | json\n</code></pre> <p>Return the input object serialized to a JSON (JavaScript Object Notation) string.</p> data<pre><code>{\n  \"product\": {\n    \"id\": 1234,\n    \"name\": \"Football\"\n  }\n}\n</code></pre> <pre><code>{{ product | json }}\n</code></pre> output<pre><code>{ \"id\": 1234, \"name\": \"Football\" }\n</code></pre>"},{"location":"filter_reference/#last","title":"last","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | last\n</code></pre> <p>Return the last item in the array-like input.</p> <pre><code>{{ \"Ground control to Major Tom.\" | split: \" \" | last }}\n</code></pre> output<pre><code>Tom.\n</code></pre> <p>If the input is undefined, empty, string or a number, <code>nil</code> will be returned.</p>"},{"location":"filter_reference/#lstrip","title":"lstrip","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | lstrip\n</code></pre> <p>Return the input string with all leading whitespace removed. If the input is not a string, it will be converted to a string before stripping whitespace.</p> <pre><code>{{ \"          So much room for activities          \" | lstrip }}!\n</code></pre> output<pre><code>So much room for activities          !\n</code></pre>"},{"location":"filter_reference/#map","title":"map","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | map: &lt;string&gt;\n</code></pre> <p>Extract properties from an array of objects into a new array.</p> <p>For example, if <code>pages</code> is an array of objects with a <code>category</code> property:</p> data<pre><code>{\n  \"pages\": [\n    { \"category\": \"business\" },\n    { \"category\": \"celebrities\" },\n    { \"category\": \"lifestyle\" },\n    { \"category\": \"sports\" },\n    { \"category\": \"technology\" }\n  ]\n}\n</code></pre> <pre><code>{% assign categories = pages | map: \"category\" -%}\n\n{% for category in categories -%}\n- {{ category }}\n{%- endfor %}\n</code></pre> output<pre><code>- business\n- celebrities\n- lifestyle\n- sports\n- technology\n</code></pre>"},{"location":"filter_reference/#minus","title":"minus","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | minus: &lt;number&gt;\n```\n\nReturn the result of subtracting one number from another. If either the input or argument are not a number, Liquid will try to convert them to a number. If that conversion fails, `0` is used instead.\n\n```liquid2\n{{ 4 | minus: 2 }}\n{{ \"16\" | minus: 4 }}\n{{ 183.357 | minus: 12.2 }}\n{{ \"hello\" | minus: 10 }}\n</code></pre> output<pre><code>2\n12\n171.157\n-10\n</code></pre>"},{"location":"filter_reference/#modulo","title":"modulo","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | modulo: &lt;number&gt;\n</code></pre> <p>Return the remainder from the division of the input by the argument.</p> <pre><code>{{ 3 | modulo: 2 }}\n{{ \"24\" | modulo: \"7\" }}\n{{ 183.357 | modulo: 12 }}\n</code></pre> output<pre><code>1\n3\n3.357\n</code></pre> <p>If either the input or argument are not an integer or float, Liquid will try to convert them to an integer or float. If the input can't be converted, <code>0</code> will be used instead. If the argument can't be converted, an exception is raised.</p>"},{"location":"filter_reference/#money","title":"money","text":"<p>0.1.0 </p> <p><code>money</code> is an alias for <code>currency</code>.</p>"},{"location":"filter_reference/#money_with_currency","title":"money_with_currency","text":"<p>0.1.0 </p> <p><code>money_with_currency</code> is an alias for <code>currency</code> with the default format set to <code>\"\u00a4#,##0.00 \u00a4\u00a4\"</code>.</p>"},{"location":"filter_reference/#money_without_currency","title":"money_without_currency","text":"<p>0.1.0 </p> <p><code>money_without_currency</code> is an alias for <code>currency</code> with the default format set to <code>\"#,##0.00\u00a4\"</code>.</p>"},{"location":"filter_reference/#money_without_trailing_zeros","title":"money_without_trailing_zeros","text":"<p>0.1.0 </p> <p><code>money_without_trailing_zeros</code> is an alias for <code>currency</code> with the default format set to <code>\"\u00a4#,###\"</code> and <code>currency_digits</code> set to <code>False</code>.</p>"},{"location":"filter_reference/#newline_to_br","title":"newline_to_br","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | newline_to_br\n</code></pre> <p>Return the input string with <code>\\n</code> and <code>\\r\\n</code> replaced with <code>&lt;br /&gt;\\n</code>.</p> <pre><code>{% capture string_with_newlines %}\nHello\nthere\n{% endcapture %}\n\n{{ string_with_newlines | newline_to_br }}\n</code></pre> output<pre><code>&lt;br /&gt;\nHello&lt;br /&gt;\nthere&lt;br /&gt;\n</code></pre>"},{"location":"filter_reference/#ngettext","title":"ngettext","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | ngettext: &lt;string&gt;, &lt;number&gt; [, &lt;identifier&gt;: &lt;object&gt; ... ]\n</code></pre> <p>Return the localized translation of the input message with pluralization. The first positional argument is the plural form of the message. The second is a number used to determine if the singular or plural message should be used.</p> <pre><code>{% assign count = \"Earth,Tatooine\" | split: \",\" | size %}\n{{ \"Hello, World!\" | ngetetxt: \"Hello, Worlds!\", count }}\n</code></pre> output<pre><code>Hallo Welten!\n</code></pre> <p>Any keyword arguments are used to populate message variables. If <code>user.name</code> is <code>\"Sue\"</code> and <code>count</code> is <code>1</code>:</p> <pre><code>{{ \"Hello, %(you)s\" | ngetetxt: \"Hello, everyone!\", count, you: user.name }}\n</code></pre> output<pre><code>Hallo Sue!\n</code></pre>"},{"location":"filter_reference/#npgettext","title":"npgettext","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | npgettext: &lt;string&gt;, &lt;string&gt;, &lt;number&gt; [, &lt;identifier&gt;: &lt;object&gt; ... ]\n``\n\nReturn the localized translation of the input message with pluralization and a message context. The first positional argument is the message context string, the second is the plural form of the message, and the third is a number used to determine if the singular or plural message should be used.\n\n```liquid2\n{% assign count = \"Earth,Tatooine\" | split: \",\" | size %}\n{{ \"Hello, World!\" | ngetetxt: \"extra special greeting\", \"Hello, Worlds!\", count }}\n</code></pre> output<pre><code>Hallo Welten!\n</code></pre> <p>Any keyword arguments are used to populate message variables. If <code>user.name</code> is <code>\"Sue\"</code> and <code>count</code> is <code>1</code>:</p> <pre><code>{{ \"Hello, %(you)s\" | ngetetxt: \"extra special greeting\", \"Hello, everyone!\", count, you: user.name }}\n</code></pre> output<pre><code>Hallo Sue!\n</code></pre>"},{"location":"filter_reference/#pgettext","title":"pgettext","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | pgettext: &lt;string&gt; [, &lt;identifier&gt;: &lt;object&gt; ... ]\n</code></pre> <p>Return the localized translation of the input message with additional message context. Message context is used to give translators extra information about where the messages is to be used.</p> <pre><code>{{ \"Hello, World!\" | pgettext: \"extra special greeting\" }}\n</code></pre> output<pre><code>Hallo Welt!\n</code></pre> <p>Any keyword arguments are used to populate message variables. If <code>user.name</code> is <code>\"Sue\"</code>:</p> <pre><code>{{ \"Hello, %(you)s\" | pgettext: \"extra special greeting\", you: user.name }}\n</code></pre> output<pre><code>Hallo Sue!\n</code></pre>"},{"location":"filter_reference/#plus","title":"plus","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | plus: &lt;number&gt;\n</code></pre> <p>Return the result of adding one number to another. If either the input or argument are not a number, Liquid will try to convert them to a number. If that conversion fails, <code>0</code> is used instead.</p> <pre><code>{{ 4 | plus: 2 }}\n{{ \"16\" | plus: \"4\" }}\n{{ 183.357 | plus: 12 }}\n</code></pre> output<pre><code>6\n20\n195.357\n</code></pre>"},{"location":"filter_reference/#prepend","title":"prepend","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | prepend: &lt;string&gt;\n</code></pre> <p>Return the argument concatenated with the filter input.</p> <pre><code>{{ \"apples, oranges, and bananas\" | prepend: \"Some fruit: \" }}\n</code></pre> output<pre><code>Some fruit: apples, oranges, and bananas\n</code></pre> <p>If either the input value or argument are not a string, they will be coerced to a string before concatenation.</p> <pre><code>{% assign a_number = 7.5 -%}\n{{ 42 | prepend: a_number }}\n{{ nosuchthing | prepend: 'World!' }}\n</code></pre> output<pre><code>7.542\nWorld!\n</code></pre>"},{"location":"filter_reference/#remove","title":"remove","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | remove: &lt;string&gt;\n</code></pre> <p>Return the input with all occurrences of the argument string removed.</p> <pre><code>{{ \"I strained to see the train through the rain\" | remove: \"rain\" }}\n</code></pre> output<pre><code>I sted to see the t through the\n</code></pre> <p>If either the filter input or argument are not a string, they will be coerced to a string before substring removal.</p>"},{"location":"filter_reference/#remove_first","title":"remove_first","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | remove_first: &lt;string&gt;\n</code></pre> <p>Return a copy of the input string with the first occurrence of the argument string removed.</p> <pre><code>{{ \"I strained to see the train through the rain\" | remove_first: \"rain\" }}\n</code></pre> output<pre><code>I sted to see the train through the rain\n</code></pre> <p>If either the filter input or argument are not a string, they will be coerced to a string before substring removal.</p>"},{"location":"filter_reference/#remove_last","title":"remove_last","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | remove_last: &lt;string&gt;\n</code></pre> <p>Return a copy of the input string with the last occurrence of the argument string removed.</p> <pre><code>{{ \"I strained to see the train through the rain\" | remove_last: \"rain\" }}\n</code></pre> output<pre><code>I strained to see the train through the\n</code></pre> <p>If either the filter input or argument are not a string, they will be coerced to a string before substring removal.</p>"},{"location":"filter_reference/#replace","title":"replace","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | replace: &lt;string&gt;[, &lt;string&gt;]\n</code></pre> <p>Return the input with all occurrences of the first argument replaced with the second argument. If the second argument is omitted, it will default to an empty string, making <code>replace</code> behave like <code>remove</code>.</p> <pre><code>{{ \"Take my protein pills and put my helmet on\" | replace: \"my\", \"your\" }}\n</code></pre> output<pre><code>Take your protein pills and put your helmet on\n</code></pre> <p>If either the filter input or argument are not a string, they will be coerced to a string before replacement.</p>"},{"location":"filter_reference/#replace_first","title":"replace_first","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | replace_first: &lt;string&gt;[, &lt;string&gt;]\n</code></pre> <p>Return a copy of the input string with the first occurrence of the first argument replaced with the second argument. If the second argument is omitted, it will default to an empty string, making <code>replace_first</code> behave like <code>remove_first</code>.</p> <pre><code>{{ \"Take my protein pills and put my helmet on\" | replace_first: \"my\", \"your\" }}\n</code></pre> output<pre><code>Take your protein pills and put my helmet on\n</code></pre> <p>If either the filter input or argument are not a string, they will be coerced to a string before replacement.</p>"},{"location":"filter_reference/#replace_last","title":"replace_last","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | replace_last: &lt;string&gt;, &lt;string&gt;\n</code></pre> <p>Return a copy of the input string with the last occurrence of the first argument replaced with the second argument.</p> <pre><code>{{ \"Take my protein pills and put my helmet on\" | replace_first: \"my\", \"your\" }}\n</code></pre> output<pre><code>Take my protein pills and put your helmet on\n</code></pre> <p>If either the filter input or argument are not a string, they will be coerced to a string before replacement.</p>"},{"location":"filter_reference/#reverse","title":"reverse","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | reverse\n</code></pre> <p>Return a copy of the input array with the items in reverse order. If the filter input is a string, <code>reverse</code> will return the string unchanged.</p> <pre><code>{% assign my_array = \"apples, oranges, peaches, plums\" | split: \", \" -%}\n\n{{ my_array | reverse | join: \", \" }}\n</code></pre> output<pre><code>plums, peaches, oranges, apples\n</code></pre>"},{"location":"filter_reference/#round","title":"round","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | round[: &lt;number&gt;]\n</code></pre> <p>Return the input number rounded to the given number of decimal places. The number of digits defaults to <code>0</code>.</p> <pre><code>{{ 1.2 | round }}\n{{ 2.7 | round }}\n{{ 183.357 | round: 2 }}\n</code></pre> output<pre><code>1\n3\n183.36\n</code></pre> <p>If either the filter input or its optional argument are not an integer or float, they will be converted to an integer or float before rounding.</p>"},{"location":"filter_reference/#rstrip","title":"rstrip","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | rstrip\n</code></pre> <p>Return the input string with all trailing whitespace removed. If the input is not a string, it will be converted to a string before stripping whitespace.</p> <pre><code>{{ \"          So much room for activities          \" | rstrip }}!\n</code></pre> output<pre><code>          So much room for activities!\n</code></pre>"},{"location":"filter_reference/#safe","title":"safe","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | safe\n</code></pre> <p>Return the input string marked as safe to use in an HTML or XML document. If the filter input is not a string, it will be converted to an HTML-safe string.</p> <p>With auto-escape enabled and the following global variables:</p> data<pre><code>{\n  \"username\": \"Sally\",\n  \"greeting\": \"&lt;/p&gt;&lt;script&gt;alert('XSS!');&lt;/script&gt;\"\n}\n</code></pre> template<pre><code>&lt;p&gt;{{ greeting }}, {{ username }}&lt;/p&gt;\n&lt;p&gt;{{ greeting | safe }}, {{ username }}&lt;/p&gt;\n</code></pre> output<pre><code>&lt;p&gt;&amp;lt;/p&amp;gt;&amp;lt;script&amp;gt;alert(&amp;#34;XSS!&amp;#34;);&amp;lt;/script&amp;gt;, Sally&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;&lt;script&gt;alert('XSS!');&lt;/script&gt;, Sally&lt;/p&gt;\n</code></pre>"},{"location":"filter_reference/#size","title":"size","text":"<p>0.1.0 </p> <pre><code>&lt;object&gt; | size\n</code></pre> <p>Return the size of the input object. Works on strings, arrays and hashes.</p> <pre><code>{{ \"Ground control to Major Tom.\" | size }}\n{{ \"apples, oranges, peaches, plums\" | split: \", \" | size }}\n</code></pre> output<pre><code>28\n4\n</code></pre>"},{"location":"filter_reference/#slice","title":"slice","text":"<p>0.1.0 </p> <pre><code>&lt;sequence&gt; | slice: &lt;int&gt;[, &lt;int&gt;]\n</code></pre> <p>Return a substring or subsequence of the input string or array. The first argument is the zero-based start index. The second, optional argument is the length of the substring or sequence, which defaults to <code>1</code>.</p> <pre><code>{{ \"Liquid\" | slice: 0 }}\n{{ \"Liquid\" | slice: 2 }}\n{{ \"Liquid\" | slice: 2, 5 }}\n{% assign beatles = \"John, Paul, George, Ringo\" | split: \", \" -%}\n{{ beatles | slice: 1, 2 | join: \" \" }}\n</code></pre> output<pre><code>L\nq\nquid\nPaul George\n</code></pre> <p>If the first argument is negative, the start index is counted from the end of the sequence.</p> <pre><code>{{ \"Liquid\" | slice: -3 }}\n{{ \"Liquid\" | slice: -3, 2 }}\n{% assign beatles = \"John, Paul, George, Ringo\" | split: \", \" -%}\n{{ beatles | slice: -2, 2 | join: \" \" }}\n</code></pre> output<pre><code>u\nui\nGeorge Ringo\n</code></pre>"},{"location":"filter_reference/#sort","title":"sort","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | sort[: &lt;string&gt;]\n``\n\nReturn a copy of the input array with its elements sorted.\n\n```liquid\n{% assign my_array = \"zebra, octopus, giraffe, Sally Snake\" | split: \", \" -%}\n{{ my_array | sort | join: \", \" }}\n</code></pre> output<pre><code>Sally Snake, giraffe, octopus, zebra\n</code></pre> <p>The optional argument is a sort key. If given, it should be the name of a property and the filter's input should be an array of objects.</p> data<pre><code>{\n  \"collection\": {\n    \"products\": [\n      { \"title\": \"A Shoe\", \"price\": \"9.95\" },\n      { \"title\": \"A Tie\", \"price\": \"0.50\" },\n      { \"title\": \"A Hat\", \"price\": \"2.50\" }\n    ]\n  }\n}\n</code></pre> template<pre><code>{% assign products_by_price = collection.products | sort: \"price\" -%}\n{% for product in products_by_price %}\n  &lt;h4&gt;{{ product.title }}&lt;/h4&gt;\n{% endfor %}\n</code></pre> output<pre><code>&lt;h4&gt;A Tie&lt;/h4&gt;\n&lt;h4&gt;A Hat&lt;/h4&gt;\n&lt;h4&gt;A Shoe&lt;/h4&gt;\n</code></pre>"},{"location":"filter_reference/#sort_natural","title":"sort_natural","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | sort_natural[: &lt;string&gt;]\n</code></pre> <p>Return a copy of the input array with its elements sorted case-insensitively. Array items will be compared by their string representations, forced to lowercase.</p> <pre><code>{% assign my_array = \"zebra, octopus, giraffe, Sally Snake\" | split: \", \" -%}\n{{ my_array | sort_natural | join: \", \" }}\n</code></pre> output<pre><code>giraffe, octopus, Sally Snake, zebra\n</code></pre> <p>The optional argument is a sort key. If given, it should be the name of a property and the filter's input should be an array of objects. Array elements are compared using the lowercase string representation of that property.</p> data<pre><code>{\n  \"collection\": {\n    \"products\": [\n      { \"title\": \"A Shoe\", \"company\": \"Cool Shoes\" },\n      { \"title\": \"A Tie\", \"company\": \"alpha Ties\" },\n      { \"title\": \"A Hat\", \"company\": \"Beta Hats\" }\n    ]\n  }\n}\n</code></pre> template<pre><code>{% assign products_by_company = collection.products | sort_natural: \"company\" %}\n{% for product in products_by_company %}\n  &lt;h4&gt;{{ product.title }}&lt;/h4&gt;\n{% endfor %}\n</code></pre> output<pre><code>&lt;h4&gt;A Tie&lt;/h4&gt;\n&lt;h4&gt;A Hat&lt;/h4&gt;\n&lt;h4&gt;A Shoe&lt;/h4&gt;\n</code></pre>"},{"location":"filter_reference/#sort_numeric","title":"sort_numeric","text":"<p>0.1.0 </p> <pre><code>&lt;sequence&gt; | sort_numeric[: &lt;string&gt;]\n</code></pre> <p>Return a new array/list with items from the input sequence sorted by any integers and/or floats found in the string representation of each item. Note the difference between <code>sort_numeric</code> and <code>sort</code> in this example.</p> <pre><code>{% assign foo = '1.2.1, v1.10.0, v1.1.0, v1.2.2' | split: ', ' -%}\n{{ foo | sort_numeric | join: ', ' }}\n{{ foo | sort | join: ', ' }}\n\n{% assign bar = '107, 12, 0001' | split: ', ' -%}\n{{ bar | sort_numeric | join: ', ' }}\n{{ bar | sort | join: ', ' }}\n</code></pre> output<pre><code>v1.1.0, 1.2.1, v1.2.2, v1.10.0\n1.2.1, v1.1.0, v1.10.0, v1.2.2\n\n0001, 12, 107\n0001, 107, 12\n</code></pre> <p>The optional string argument is the name of a key/property to use as the sort key. In which case each item in the input sequence should be a dict/hash/mapping, each with said key/property.</p> <p><code>sort_numeric</code> will work as expected when given arrays/lists/tuples of integers, floats and/or Decimals, but will be slower than using standard <code>sort</code>.</p> <p>If an input sequence contains strings (or arbitrary objects that get stringified) that do not have numeric characters, they will be pushed to the end of the resulting list, probably in the same order as in the input sequence.</p>"},{"location":"filter_reference/#split","title":"split","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | split: &lt;string&gt;\n</code></pre> <p>Return an array of strings that are the input string split on the filter's argument string.</p> <pre><code>{% assign beatles = \"John, Paul, George, Ringo\" | split: \", \" -%}\n\n{% for member in beatles %}\n  {{- member }}\n{% endfor %}\n</code></pre> output<pre><code>John\nPaul\nGeorge\nRingo\n</code></pre> <p>If the argument is undefined or an empty string, the input will be split at every character.</p> <pre><code>{{ \"Hello there\" | split: nosuchthing | join: \"#\" }}\n</code></pre> output<pre><code>H#e#l#l#o# #t#h#e#r#e\n</code></pre>"},{"location":"filter_reference/#strip","title":"strip","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | strip\n</code></pre> <p>Return the input string with all leading and trailing whitespace removed. If the input is not a string, it will be converted to a string before stripping whitespace.</p> <pre><code>{{ \"          So much room for activities          \" | strip }}!\n</code></pre> output<pre><code>So much room for activities!\n</code></pre>"},{"location":"filter_reference/#strip_html","title":"strip_html","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | strip_html\n</code></pre> <p>Return the input string with all HTML tags removed.</p> <pre><code>{{ \"Have &lt;em&gt;you&lt;/em&gt; read &lt;strong&gt;Ulysses&lt;/strong&gt;?\" | strip_html }}\n</code></pre> output<pre><code>Have you read Ulysses?\n</code></pre>"},{"location":"filter_reference/#strip_newlines","title":"strip_newlines","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | strip_newlines\n</code></pre> <p>Return the input string with <code>\\n</code> and <code>\\r\\n</code> removed.</p> <pre><code>{% capture string_with_newlines %}\nHello\nthere\n{% endcapture -%}\n\n{{ string_with_newlines | strip_newlines }}\n</code></pre> output<pre><code>Hellothere\n</code></pre>"},{"location":"filter_reference/#sum","title":"sum","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | sum[: &lt;string&gt;]\n</code></pre> <p>Return the sum of all numeric elements in an array.</p> <pre><code>{% assign array = '1,2,3' | split: ',' -%}\n{{ array | sum }}\n</code></pre> output<pre><code>6\n</code></pre> <p>If the optional string argument is given, it is assumed that array items are hash/dict/mapping-like, and the argument should be the name of a property/key. The values at <code>array[property]</code> will be summed.</p>"},{"location":"filter_reference/#t","title":"t","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | t[: &lt;string&gt;[, &lt;identifier&gt;: &lt;object&gt; ... ]] -&gt; &lt;string&gt;\n</code></pre> <p>Return the localized translation of the input message. For example, if a German Translations object is found in the current render context:</p> <pre><code>{{ \"Hello, World!\" | t }}\n</code></pre> output<pre><code>Hallo Welt!\n</code></pre> <p>If given, the first and only positional argument is a message context string. It will be used to give translators extra information about where the message is to be used. With the default configuration, keyword arguments <code>plural</code> and <code>count</code> are reserved for specifying a pluralizable message.</p> <pre><code>{{ \"Hello, World!\" | t: plural: 'Hello, Worlds!', count: 2 }}\n</code></pre> output<pre><code>Hallo Welten!\n</code></pre> <p>The remaining keyword arguments are used to populate translatable message variables. If <code>user.name</code> is <code>\"Sue\"</code>:</p> <pre><code>{{ \"Hello, %(you)s\" | t: you: user.name }}\n</code></pre> output<pre><code>Hallo Sue!\n</code></pre>"},{"location":"filter_reference/#times","title":"times","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | times: &lt;number&gt;\n</code></pre> <p>Return the product of the input number and the argument. If either the input or argument are not a number, Liquid will try to convert them to a number. If that conversion fails, <code>0</code> is used instead.</p> <pre><code>{{ 3 | times: 2 }}\n{{ \"24\" | times: \"7\" }}\n{{ 183.357 | times: 12 }}\n</code></pre> output<pre><code>6\n168\n2200.284\n</code></pre>"},{"location":"filter_reference/#truncate","title":"truncate","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | truncate[: &lt;integer&gt;[, &lt;string&gt;]]\n</code></pre> <p>Return a truncated version of the input string. The first argument, length, defaults to <code>50</code>. The second argument defaults to an ellipsis (<code>...</code>).</p> <p>If the length of the input string is less than the given length (first argument), the input string will be truncated to <code>length</code> minus the length of the second argument, with the second argument appended.</p> <pre><code>{{ \"Ground control to Major Tom.\" | truncate: 20 }}\n{{ \"Ground control to Major Tom.\" | truncate: 25, \", and so on\" }}\n{{ \"Ground control to Major Tom.\" | truncate: 20, \"\" }}\n</code></pre> output<pre><code>Ground control to...\nGround control, and so on\nGround control to Ma\n</code></pre>"},{"location":"filter_reference/#truncatewords","title":"truncatewords","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | truncatewords[: &lt;integer&gt;[, &lt;string&gt;]]\n</code></pre> <p>Return the input string truncated to the specified number of words, with the second argument appended. The number of words (first argument) defaults to <code>15</code>. The second argument defaults to an ellipsis (<code>...</code>).</p> <p>If the input string already has fewer than the given number of words, it is returned unchanged.</p> <pre><code>{{ \"Ground control to Major Tom.\" | truncatewords: 3 }}\n{{ \"Ground control to Major Tom.\" | truncatewords: 3, \"--\" }}\n{{ \"Ground control to Major Tom.\" | truncatewords: 3, \"\" }}\n</code></pre> output<pre><code>Ground control to...\nGround control to--\nGround control to\n</code></pre>"},{"location":"filter_reference/#uniq","title":"uniq","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | uniq[: &lt;string&gt;]\n</code></pre> <p>Return a copy of the input array with duplicate elements removed.</p> <pre><code>{% assign my_array = \"ants, bugs, bees, bugs, ants\" | split: \", \" -%}\n{{ my_array | uniq | join: \", \" }}\n</code></pre> output<pre><code>ants, bugs, bees\n</code></pre> <p>If an argument is given, it should be the name of a property and the filter's input should be an array of objects.</p> data<pre><code>{\n  \"collection\": {\n    \"products\": [\n      { \"title\": \"A Shoe\", \"company\": \"Cool Shoes\" },\n      { \"title\": \"A Tie\", \"company\": \"alpha Ties\" },\n      { \"title\": \"Another Tie\", \"company\": \"alpha Ties\" },\n      { \"title\": \"A Hat\", \"company\": \"Beta Hats\" }\n    ]\n  }\n}\n</code></pre> template<pre><code>{% assign one_product_from_each_company = collections.products | uniq: \"company\" -%}\n{% for product in one_product_from_each_company -%}\n  - product.title\n{% endfor %}\n</code></pre> output<pre><code>- A Shoe\n- A Tie\n- A Hat\n</code></pre>"},{"location":"filter_reference/#unit","title":"unit","text":"<p>0.1.0 </p> <pre><code>&lt;number&gt; | unit: &lt;string&gt;\n  [, denominator: &lt;number&gt;]\n  [, denominator_unit: &lt;string&gt;]\n  [, length: &lt;string&gt;]\n  [, format: &lt;string&gt;]\n</code></pre> <p>Return the input number formatted with the given units according to the current locale. The first, required positional argument is a CLDR measurement unit code.</p> <pre><code>{{ 12 | unit: 'length-meter' }}\n</code></pre> output<pre><code>12 meters\n</code></pre>"},{"location":"filter_reference/#length","title":"length","text":"<p><code>length</code> can be one of \"short\", \"long\" or \"narrow\", defaulting to \"long\".</p> <pre><code>{{ 12 | unit: 'length-meter' }}\n{{ 12 | unit: 'length-meter', length: 'short' }}\n{{ 12 | unit: 'length-meter', length: 'long' }}\n{{ 12 | unit: 'length-meter', length: 'narrow' }}\n</code></pre> output<pre><code>12 meters\n12 m\n12 meters\n12m\n</code></pre> <p>Or, if the current locale is set to <code>fr</code>.</p> <pre><code>{% with locale:\"fr\" %}\n  {{ 12 | unit: 'length-meter' }}\n  {{ 12 | unit: 'length-meter', length: 'short' }}\n  {{ 12 | unit: 'length-meter', length: 'long' }}\n  {{ 12 | unit: 'length-meter', length: 'narrow' }}\n{% endwith %}\n</code></pre> output<pre><code>12\u00a0m\u00e8tres\n12\u202fm\n12\u00a0m\u00e8tres\n12m\n</code></pre>"},{"location":"filter_reference/#format","title":"format","text":"<p><code>format</code> is an optional decimal format string, described in the Locale Data Markup Language specification (LDML).</p> <pre><code>{{ 12 | unit: 'length-meter', format: '#,##0.00' }}\n</code></pre> output<pre><code>12.00 meters\n</code></pre>"},{"location":"filter_reference/#compound-units","title":"Compound Units","text":"<p>If a <code>denominator</code> and/or <code>denominator_unit</code> is given, the value will be formatted as a compound unit.</p> <pre><code>{{ 150 | unit: 'kilowatt', denominator_unit: 'hour' }}\n{{ 32.5 | unit: 'ton', denominator: 15, denominator_unit: 'hour' }}\n</code></pre> output<pre><code>150 kilowatts per hour\n32.5 tons per 15 hours\n</code></pre> <p>Or, if the current locale is set to <code>fi</code>.</p> <pre><code>{% with locale:\"fi\" %}\n  {{ 150 | unit: 'kilowatt', denominator_unit: 'hour' }}\n  {{ 32.5 | unit: 'ton', denominator: 15, denominator_unit: 'hour' }}\n{% endwith %}\n</code></pre> output<pre><code>150 kilowattia / tunti\n32,5 am. tonnia/15 tuntia\n</code></pre>"},{"location":"filter_reference/#upcase","title":"upcase","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | upcase\n</code></pre> <p>Return the input string with all characters in uppercase.</p> <pre><code>{{ 'Hello, World!' | upcase }}\n</code></pre> output<pre><code>HELLO, WORLD!\n</code></pre>"},{"location":"filter_reference/#url_decode","title":"url_decode","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | url_decode\n</code></pre> <p>Return the input string with <code>%xx</code> escapes replaced with their single-character equivalents. Also replaces <code>'+'</code> with <code>' '</code>.</p> <pre><code>{{ \"My+email+address+is+bob%40example.com%21\" | url_decode }}\n</code></pre> output<pre><code>My email address is bob@example.com!\n</code></pre>"},{"location":"filter_reference/#url_encode","title":"url_encode","text":"<p>0.1.0 </p> <pre><code>&lt;string&gt; | url_encode\n</code></pre> <p>Return the input string with URL reserved characters %-escaped. Also replaces <code>' '</code> with <code>'+'</code>.</p> <pre><code>{{ My email address is bob@example.com! | url_encode }}\n</code></pre> output<pre><code>My+email+address+is+bob%40example.com%21\n</code></pre>"},{"location":"filter_reference/#where","title":"where","text":"<p>0.1.0 </p> <pre><code>&lt;array&gt; | where: &lt;string&gt;[, &lt;object&gt;]\n</code></pre> <p>Return a copy of the input array including only those objects that have a property, named with the first argument, equal to a value, given as the second argument. If a second argument is not given, only elements with the named property that are truthy will be included.</p> data<pre><code>{\n  \"products\": [\n    { \"title\": \"Vacuum\", \"type\": \"house\", \"available\": true },\n    { \"title\": \"Spatula\", \"type\": \"kitchen\", \"available\": false },\n    { \"title\": \"Television\", \"type\": \"lounge\", \"available\": true },\n    { \"title\": \"Garlic press\", \"type\": \"kitchen\", \"available\": true }\n  ]\n}\n</code></pre> <pre><code>All products:\n{% for product in products -%}\n- {{ product.title }}\n{% endfor %}\n\n{%- assign kitchen_products = products | where: \"type\", \"kitchen\" -%}\n\nKitchen products:\n{% for product in kitchen_products -%}\n- {{ product.title }}\n{% endfor %}\n\n{%- assign available_products = products | where: \"available\" -%}\n\nAvailable products:\n{% for product in available_products -%}\n- {{ product.title }}\n{% endfor %}\n</code></pre> output<pre><code>All products:\n- Vacuum\n- Spatula\n- Television\n- Garlic press\n\nKitchen products:\n- Spatula\n- Garlic press\n\nAvailable product:\n- Vacuum\n- Television\n- Garlic press\n</code></pre>"},{"location":"loading_templates/","title":"Loading templates","text":"<p>A template loader is a class inheriting from <code>BaseLoader</code>. It is responsible for finding template source text given a name or identifier, and will be called upon whenever you or a tag call <code>Environment.get_template()</code> or await <code>Environment.get_template_async()</code>.</p> <p>To use one of the template loaders described here, pass an instance of your chosen loader as the <code>loader</code> argument when constructing a Liquid <code>Environment</code>.</p>"},{"location":"loading_templates/#built-in-loaders","title":"Built-in loaders","text":""},{"location":"loading_templates/#dictionary-loader","title":"Dictionary loader","text":"<p><code>DictLoader</code> is a template loader that stores template source text in memory using a dictionary. If you're experimenting with Liquid or if all your templates are known at application startup time and they all fit in RAM, then <code>DictLoader</code> is a good choice.</p> <p>Simply pass a dictionary mapping template names to template source text to the <code>DictLoader</code> constructor.</p> <pre><code>from liquid2 import DictLoader\nfrom liquid2 import Environment\n\nenv = Environment(\n    loader=DictLoader(\n        {\n            \"index\": \"{% render 'header' %}\\nbody\\n{% render 'footer' %}\",\n            \"header\": \"some header\",\n            \"footer\": \"a footer\",\n        }\n    )\n)\n\ntemplate = env.get_template(\"index\")\nprint(template.render())\n</code></pre> output<pre><code>some header\nbody\na footer\n</code></pre>"},{"location":"loading_templates/#caching-dictionary-loader","title":"Caching dictionary loader","text":"<p><code>CachingDictLoader</code> is a dictionary loader that maintains an in-memory LRU cache of parsed templates, so as to avoid parsing the same source text multiple times unnecessarily.</p> <p>As well as a dictionary mapping template names to template source text, the <code>CachingDictLoader</code> constructor takes an optional <code>capacity</code> argument to control the maximum size of the cache. The default capacity is 300 templates.</p> <pre><code>from liquid2 import CachingDictLoader\nfrom liquid2 import Environment\n\nenv = Environment(\n    loader=CachingDictLoader(\n        {\n            \"index\": \"{% render 'header' %}\\nbody\\n{% render 'footer' %}\",\n            \"header\": \"some header\",\n            \"footer\": \"a footer\",\n        }\n    )\n)\n\ntemplate = env.get_template(\"index\")\nassert env.get_template(\"index\") is template\n</code></pre>"},{"location":"loading_templates/#file-system-loader","title":"File system loader","text":"<p><code>FileSystemLoader</code> is a template loader that reads source text from files on a file system. Its first argument, <code>search_path</code>, is a path to a folder containing Liquid templates, either as a string or <code>pathlib.Path</code>. <code>search_path</code> can also be a list of paths to search in order.</p> <p>In this example, calls to <code>Environment.get_template()</code> will look for templates in a folder called <code>templates</code> relative to the current directory.</p> <pre><code>from liquid2 import Environment\nfrom liquid2 import FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader(\"templates/\"))\n</code></pre> <p>If a file called <code>index.html</code> exists in <code>./templates</code>, we could render it with <code>{% render 'index.html' %}</code>. To avoid having to include <code>.html</code> in every <code>render</code> tag, we can give <code>FileSystemLoader</code> a default file extension. It should include a leading <code>.</code>.</p> <pre><code>from liquid2 import Environment\nfrom liquid2 import FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader(\"templates/\", ext=\".html\"))\n</code></pre> <p>If your templates are organized in sub folders of <code>./templates</code>, you can include the relative path to a template in a <code>render</code> tag, <code>{% render 'snippets/footer' %}</code>, but you won't be allowed to escape out of <code>./templates</code>. This would raise a <code>TemplateNotFoundError</code>.</p> <pre><code>{% render '../../path/to/private/file' %}\n</code></pre>"},{"location":"loading_templates/#caching-file-system-loader","title":"Caching file system loader","text":"<p><code>CachingFileSystemLoader</code> is a file system loader that maintains an in-memory LRU cache of parsed templates, so as to avoid reading and parsing the same source text multiple times unnecessarily.</p> <p>As well as <code>search_path</code> and <code>ext</code> arguments covered in the file system loader section above, <code>CachingFileSystemLoader</code> takes optional <code>auto_reload</code> and <code>capacity</code> arguments.</p> <p><code>capacity</code> is the maximum number of templates that can fit in the cache and defaults to <code>300</code> templates.</p> <p><code>auto_reload</code> is a flag to indicate if the template loader should check to see if each cached template has been modified since it was last loaded. If <code>True</code> and template source text has been modified on-disk, that source text will automatically be read and parsed again. <code>auto_reload</code> defaults to <code>True</code>.</p> <pre><code>from liquid2 import Environment\nfrom liquid2 import CachingFileSystemLoader\n\nloader = CachingFileSystemLoader(\n    \"/var/www/templates/\",\n    ext=\".liquid\",\n    auto_reload=True,\n    capacity=1000,\n)\n\nenv = Environment(loader=loader)\n</code></pre>"},{"location":"loading_templates/#package-loader","title":"Package loader","text":"<p><code>PackageLoader</code> is a template loader that reads template source text from Python packages installed in your Python environment. You should pass the name of the package and, optionally, one or more paths to directories containing template source text within the package. The default <code>package_path</code> is <code>templates</code>.</p> <p>Just like <code>FileSystemLoader</code>, <code>PackageLoader</code> accepts a default file extension, <code>ext</code>. This time it defaults to <code>.liquid</code>.</p> <pre><code>from liquid2 import Environment\nfrom liquid2 import PackageLoader\n\nloader = PackageLoader(\n    \"awesome_templates\",\n    package_path=\"path/to/templates\",\n    ext=\".liquid\",\n)\n\nenv = Environment(loader=loader)\n</code></pre>"},{"location":"loading_templates/#choice-loader","title":"Choice loader","text":"<p><code>ChoiceLoader</code> and <code>CachingChoiceLoader</code> are template loaders that delegate to a list of other template loaders. Each one is tried in turn until a template is found.</p> <p>When using <code>CachingChoiceLoader</code>, you should probably avoid delegating to other caching loaders.</p> <pre><code>from liquid2 import CachingFileSystemLoader\nfrom liquid2 import ChoiceLoader\nfrom liquid2 import DictLoader\nfrom liquid2 import Environment\n\nbase_loader = DictLoader({\"foo\": \"some template source text\"})\noverlay_loader = CachingFileSystemLoader(\"templates/\")\nloader = ChoiceLoader([overlay_loader, base_loader])\n\nenv = Environment(loader=loader)\n</code></pre>"},{"location":"loading_templates/#custom-loaders","title":"Custom loaders","text":"<p>If you want to load templates from a database or over a network, you'll need to write your own template loader. Simply inherit from <code>BaseLoader</code> and implement <code>get_source()</code> and, possibly, <code>get_source_async()</code>.</p> <p><code>get_source()</code> should return an instance of <code>TemplateSource</code>, which is a named tuple containing source text, the template's name, an optional <code>uptodate</code> callable and any extra data you want bound to the template.</p> <p>Take a look at source code for the built-in loaders for examples.</p>"},{"location":"loading_templates/#load-context","title":"Load context","text":"<p><code>get_source()</code> takes an optional <code>context</code> argument. When <code>Environment.get_template()</code> is called from a tag, like <code>render</code>, the active render context will be passed along to <code>get_source()</code>. Loaders can then choose to use render context data to dynamically refine template names and loader search paths.</p> <p>Arbitrary keyword arguments can also be passed to <code>Environment.get_template()</code>. These too are passed along to <code>get_source()</code>, and can also be used by custom template loaders to refine the template source search space.</p> <p>For example, all built-in tags that call <code>Environment.get_template()</code> pass a keyword argument called <code>tag</code> set to the name of the calling tag. We can use the tag name to mimic Shopify's <code>snippets</code> convention, where <code>{% include %}</code> and <code>{% render %}</code> automatically load templates from a subfolder call <code>snippets</code>.</p> <pre><code>from pathlib import Path\n\nfrom liquid2 import CachingFileSystemLoader\nfrom liquid2 import Environment\nfrom liquid2 import RenderContext\nfrom liquid2 import TemplateSource\n\n\nclass SnippetsFileSystemLoader(CachingFileSystemLoader):\n    def get_source(\n        self,\n        env: Environment,\n        template_name: str,\n        *,\n        context: RenderContext | None = None,\n        **kwargs: object,\n    ) -&gt; TemplateSource:\n        if kwargs.get(\"tag\") in (\"include\", \"render\"):\n            snippet = Path(\"snippets\").joinpath(template_name)\n            return super().get_source(\n                env, template_name=str(snippet), context=context, **kwargs\n            )\n        return super().get_source(\n            env, template_name=template_name, context=context, **kwargs\n        )\n</code></pre>"},{"location":"loading_templates/#matter","title":"Matter","text":"<p>Sometimes template source text comes with associated data. This could be meta data read from a database or front matter read from the top of the file containing template source text. The <code>TemplateSource</code> object returned from <code>get_source()</code> facilitates these cases with <code>matter</code>, a dictionary mapping strings to arbitrary objects that will be merged with environment and template globals and bound to the resulting <code>Template</code> instance.</p> <p>Here's an example a template loader that reads front matter in YAML format.</p> <pre><code>import re\n\nimport yaml\n\nfrom liquid2 import CachingFileSystemLoader\nfrom liquid2 import Environment\nfrom liquid2 import RenderContext\nfrom liquid2 import TemplateSource\n\nRE_FRONT_MATTER = re.compile(r\"\\s*---\\s*(.*?)\\s*---\\s*\", re.MULTILINE | re.DOTALL)\n\n\nclass FrontMatterLoader(CachingFileSystemLoader):\n    def get_source(\n        self,\n        env: Environment,\n        template_name: str,\n        *,\n        context: RenderContext | None = None,\n        **kwargs: object,\n    ) -&gt; TemplateSource:\n        source, filename, uptodate, matter = super().get_source(env, template_name)\n        match = RE_FRONT_MATTER.search(source)\n\n        if match:\n            # TODO: add some yaml error handling here.\n            matter = yaml.load(match.group(1), Loader=yaml.SafeLoader)\n            source = source[match.end() :]\n\n        return TemplateSource(\n            source,\n            filename,\n            uptodate,\n            matter,\n        )\n</code></pre>"},{"location":"loading_templates/#caching-mixin","title":"Caching mixin","text":"<p>Use <code>CachingLoaderMixin</code> to add in-memory LRU caching to your custom template loaders. For example, here's the definition of <code>CachingDictLoader</code>.</p> <pre><code>from liquid2 import CachingLoaderMixin\nfrom liquid2 import DictLoader\n\nclass CachingDictLoader(CachingLoaderMixin, DictLoader):\n    \"\"\"A `DictLoader` that caches parsed templates in memory.\"\"\"\n\n    def __init__(\n        self,\n        templates: dict[str, str],\n        *,\n        auto_reload: bool = True,\n        namespace_key: str = \"\",\n        capacity: int = 300,\n    ):\n        super().__init__(\n            auto_reload=auto_reload,\n            namespace_key=namespace_key,\n            capacity=capacity,\n        )\n\n        DictLoader.__init__(self, templates)\n</code></pre>"},{"location":"migration/","title":"Migration guide","text":"<p>When compared to Python Liquid and Shopify/Liquid, Liquid2 adds features, subtly changes the syntax of Liquid templates and changes the template engine's Python API. This is not \"Python Liquid version 2\", but a Python implementation of \"Liquid2\", which is mostly backwards compatible with other implementations.</p>"},{"location":"migration/#approach-to-compatibility-and-stability","title":"Approach to compatibility and stability","text":"<p>With Python Liquid, our primary objectives were render behavior stability and Shopify/Liquid compatibility, in that order. Later we introduced <code>liquid.future.Environment</code>, which sacrificed some stability for greater Shopify/Liquid compatibility as Shopify/Liquid and our understanding of it changed.</p> <p>Now, with Python Liquid2, render behavior stability is still the top priority, but the default environment deliberately deviates from Shopify/Liquid in several ways, \"fixing\" and adding often requested features that Shopify can't due to their large user base and the technical debt that comes with it.</p> <p>In most cases these fixes and features are backwards compatible with Shopify/Liquid, requiring little or no modification to legacy Liquid templates. To ease transition from legacy templates to Liquid2 templates, we include a <code>liquid2.shopify.Environment</code>, which is configured to include some legacy tags that didn't make it in to the default environment.</p>"},{"location":"migration/#why-is-render-stability-so-important","title":"Why is render stability so important?","text":"<p>When developing a conventional website, for example, templates are developed along side application code. Template authors and application developers might be different people or different teams, but templates are known at deployment time, and all templates can probably be parsed upfront and held in memory. In this scenario it's a pain if your template render engine introduces behavioral changes, but it's manageable.</p> <p>Python Liquid caters for situations where templates change and grow with an application's user base. Not only can templates change after the application is deployed, but the number of templates could be huge, far more than can be expected to fit in memory all at once.</p> <p>Behavioral stability is essential when application users are responsible for maintaining templates. It is impractical or unreasonable to expect authors to update their templates on demand.</p> <p>Whether shopify/Liquid compatibility is important to you or not, if you're developing a multi-tenant application where users are responsible for maintaining templates, you should seriously consider building in an opt-in upgrade path for template authors to transition to updated syntax and features.</p>"},{"location":"migration/#new-features","title":"New features","text":""},{"location":"migration/#more-whitespace-control","title":"More whitespace control","text":"<p>Along with a <code>default_trim</code> configuration option, tags and the output statement now support <code>+</code>, <code>-</code> and <code>~</code> for controlling whitespace in templates. By default, <code>~</code> will remove newlines but retain space and tab characters.</p> <p>Here we use <code>~</code> to remove the newline after the opening <code>for</code> tag, but preserve indentation before <code>&lt;li&gt;</code>.</p> <pre><code>&lt;ul&gt;\n{% for x in (1..4) ~%}\n  &lt;li&gt;{{ x }}&lt;/li&gt;\n{% endfor -%}\n&lt;/ul&gt;\n</code></pre> output<pre><code>&lt;ul&gt;\n  &lt;li&gt;1&lt;/li&gt;\n  &lt;li&gt;2&lt;/li&gt;\n  &lt;li&gt;3&lt;/li&gt;\n  &lt;li&gt;4&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"migration/#array-construction-syntax","title":"Array construction syntax","text":"<p>If the left-hand side of a filtered expression (those found in output statements, the <code>assign</code> tag and the <code>echo</code> tag) is a comma separated list of primitive expressions, an array-like object will be created with those items.</p> <pre><code>{% assign my_array = a, b, '42', false -%}\n{% for item in my_array -%}\n    - {{ item }}\n{% endfor %}\n</code></pre> <p>or, using a <code>{% liquid %}</code> tag:</p> <pre><code>{% liquid\n    assign my_array = a, b, '42', false\n    for item in my_array\n        echo \"- ${item}\\n\"\n    endfor %}\n</code></pre> <p>With <code>a</code> set to <code>\"Hello\"</code> and <code>b</code> set to <code>\"World\"</code>, both of the examples above produce the following output.</p> output<pre><code>- Hello\n- World\n- 42\n- false\n</code></pre>"},{"location":"migration/#string-interpolation","title":"String interpolation","text":"<p>String literals support interpolation using JavaScript-style <code>${</code> and <code>}</code> delimiters. Liquid template strings don't use backticks like JavaScript. Any single or double quoted string can use <code>${variable_name}</code> placeholders for automatic variable substitution.</p> <p><code>${</code> can be escaped with <code>\\${</code> to prevent variable substitution.</p> <p>Liquid template strings are effectively a shorthand alternative to <code>capture</code> tags or chains of <code>append</code> filters. These two tags equivalent.</p> <pre><code>{% capture greeting %}\nHello, {{ you | capitalize }}!\n{% endcapture %}\n\n{% assign greeting = 'Hello, ${you | capitalize}!' %}\n</code></pre>"},{"location":"migration/#logical-not","title":"Logical <code>not</code>","text":"<p>Logical expressions now support negation with the <code>not</code> operator and grouping terms with parentheses by default. Previously this was an opt-in feature.</p> <p>In this example, <code>{% if not user %}</code> is equivalent to <code>{% unless user %}</code>, however, <code>not</code> can also be used after <code>and</code> and <code>or</code>, like <code>{% if user.active and not user.title %}</code>, potentially saving nested <code>if</code> and <code>unless</code> tags.</p> <pre><code>{% if not user %}\n  please log in\n{% else %}\n  hello user\n{% endif %}\n</code></pre>"},{"location":"migration/#ternary-expressions","title":"Ternary expressions","text":"<p>Inline conditional expression are now supported by default. Previously this was an opt-in feature. If omitted, the <code>else</code> branch defaults to an instance of <code>Undefined</code>.</p> <pre><code>{{ a if b else c }}\n{{ a | upcase if b == 'foo' else c || split }}\n</code></pre>"},{"location":"migration/#dedicated-comment-syntax","title":"Dedicated comment syntax","text":"<p>Comments surrounded by <code>{#</code> and <code>#}</code> are enabled by default. Additional <code>#</code>'s can be added to comment out blocks of markup that already contain comments, as long as hashes are balanced.</p> <pre><code>{## comment this out for now\n{% for x in y %}\n    {# x could be empty #}\n    {{ x | default: TODO}}\n{% endfor %}\n##}\n</code></pre>"},{"location":"migration/#better-string-literal-parsing","title":"Better string literal parsing","text":"<p>String literals are now allowed to contain markup delimiters (<code>{{</code>, <code>}}</code>, <code>{%</code>, <code>%}</code>, <code>{#</code> and <code>#}</code>) and support c-like escape sequence to allow for including quote characters, literal newline characters and <code>\\uXXXX</code> Unicode code points.</p> <pre><code>{% assign x = \"Hi \\uD83D\\uDE00!\" %}\n{{ x }}\n</code></pre> output<pre><code>Hi \ud83d\ude00!\n</code></pre>"},{"location":"migration/#unicode-identifiers","title":"Unicode identifiers","text":"<p>Identifiers and paths resolving to variables can contain Unicode characters (templates are assumed to be UTF-8 encoded). For example:</p> <pre><code>{% assign \ud83d\ude00 = 'smiley' %}\n{{ \ud83d\ude00 }}\n</code></pre>"},{"location":"migration/#scientific-notation","title":"Scientific notation","text":"<p>Integer and float literals can use scientific notation, like <code>1.2e3</code> or <code>1e-2</code>.</p>"},{"location":"migration/#common-argument-delimiters","title":"Common argument delimiters","text":"<p>Filter and tag named arguments can be separated by a <code>:</code> or <code>=</code>. Previously only <code>:</code> was allowed.</p>"},{"location":"migration/#template-inheritance","title":"Template inheritance","text":"<p>Template inheritance is now built-in. Previously <code>{% extends %}</code> and <code>{% block %}</code> tags were available from a separate package.</p>"},{"location":"migration/#i18n-and-l10n","title":"i18n and l10n","text":"<p>Internationalization and localization tags and filters are now built in and enabled by default. Previously these were in a separate package.</p> <p>See currency, datetime, money, decimal, unit, gettext, t and translate.</p>"},{"location":"migration/#serializable-templates","title":"Serializable templates","text":"<p>Instances of <code>Template</code> are now serializable. Use <code>str(template)</code> or <code>pickle.dump(template)</code>.</p>"},{"location":"migration/#better-exceptions","title":"Better exceptions","text":"<p>Error messages have been improved and exceptions inheriting from <code>LiquidError</code> expose line and column numbers, and have <code>detailed_message()</code> and error <code>context()</code> methods.</p> <pre><code>{% assign foo = (0..3) %}\n{% for x foo %}\n    {{ x }}\n{% endfor %}\n</code></pre> error message<pre><code>liquid2.exceptions.LiquidSyntaxError: expected IN, found WORD\n  -&gt; '{% for x foo %}' 2:9\n  |\n2 | {% for x foo %}\n  |          ^^^ expected IN, found WORD\n</code></pre>"},{"location":"migration/#features-that-have-been-removed","title":"Features that have been removed","text":"<ul> <li>We no longer offer \"lax\" or \"warn\" parsing modes, previously controlled by the <code>tolerance</code> argument to <code>Environment</code>. The assertion is that errors should be loud and we should be made aware as early as possible, whether you're an experienced developer or not.</li> <li>It's not currently possible to change Liquid markup delimiters (<code>{{</code>, <code>}}</code>, <code>{%</code> and <code>%}</code>).</li> <li>Async filters have not been implemented, but can be if there is a demand.</li> <li>Contextual template analysis has not been implemented, but can be if there is a demand.</li> <li>Template tag analysis (analyzing tokens instead of a syntax tree) has not been implemented, but can be if there is a demand.</li> <li>Liquid Babel used to allow simple, zero-argument filters in the arguments to the <code>translate</code> tag. The <code>translate</code> tag bundled in to Liquid2 does not allow the use of filters here.</li> </ul>"},{"location":"migration/#api-changes","title":"API changes","text":"<p>These are the most notable changes. Please raise an issue or start a discussion if I've missed anything or you need help with migration.</p> <ul> <li>Package level <code>Template</code> can no longer be used as a convenience function for creating a template from a string. Use <code>parse()</code> or <code>DEFAULT_ENVIRONMENT.from_string()</code> instead.</li> <li><code>StrictUndefined</code> now plays nicely with the <code>default</code> filter. Previously we had a separate <code>StrictDefaultUndefined</code> class.</li> <li><code>FileSystemLoader</code> now takes an optional default file extension to use when looking for files that don't already have an extension. Previously there was a separate <code>FileExtensionLoader</code>.</li> <li><code>AwareBoundTemplate</code> (a template with a built-in <code>template</code> drop) has been removed, but can be added as a feature later if there is a demand.</li> <li>The <code>auto_reload</code> and <code>cache_size</code> arguments to <code>Environment</code> have been removed. Now caching is handle by template loaders, not the environment. For example, pass a <code>CachingFileSystemLoader</code> as the <code>loader</code> argument to <code>Environment</code> instead of a <code>FileSystemLoader</code>.</li> <li>The <code>strict_filters</code> argument to <code>Environment</code> has been removed. Unknown filters now always raise an <code>UnknownFilterError</code>.</li> <li><code>TemplateNotFound</code> has been renamed to <code>TemplateNotFoundError</code>.</li> <li><code>Context</code> has been renamed to <code>RenderContext</code> and now takes a mandatory <code>template</code> argument instead of <code>env</code>. All other arguments to <code>RenderContext</code> are now keyword only.</li> <li><code>FilterValueError</code> and <code>FilterArgumentError</code> have been removed. <code>LiquidValueError</code> and <code>LiquidTypeError</code> should be used instead. In some cases where <code>FilterValueError</code> was deliberately ignored before, <code>LiquidValueError</code> is now raised.</li> <li>The exception <code>NoSuchFilterFunc</code>, raised when rendering a template that uses a filter that is not defined in <code>Environment.filters</code>, has been renamed to <code>UnknownFilterError</code>.</li> <li>The <code>@liquid_filter</code> decorator has been removed. Now filter implementations are expected to raise a <code>LiquidTypeError</code> in the even of an argument with an unacceptable type.</li> </ul>"},{"location":"migration/#template-and-expression-parsing","title":"Template and expression parsing","text":"<p>The lexer has been completely rewritten and the token's it produces bare little resemblance to those produced by any of the several parsing functions from Python Liquid. Now we have a single lexer that scans source text content, tags, statements and expressions in a single pass, and a parser that delegates the parsing of those tokens to classes implementing <code>Tag</code>.</p> <p>As before, <code>Tag</code> instances are responsible for returning <code>Node</code>s from <code>Tag.parse()</code>. And nodes still have the familiar <code>render_to_output()</code> abstract method.</p> <p>For now I recommend familiarizing yourself with the different tokens generated by the lexer, and refer to built-in tag implementations for examples of using various <code>Expression.parse()</code> static methods to parse expressions. Note that the <code>TokenStream</code> interface has changed too.</p> <p>As always, open an issue or start a discussion if you need any help with migration.</p>"},{"location":"migration/#performance","title":"Performance","text":"<p>TODO:</p> <ul> <li>Benchmarks show Python Liquid2 to be more JIT friendly</li> </ul>"},{"location":"migration/#package-dependencies","title":"Package dependencies","text":"<p>The following packages are dependencies of Python Liquid2.</p> <ul> <li>Markupsafe&gt;=3</li> <li>Babel&gt;=2</li> <li>python-dateutil</li> <li>pytz</li> <li>typing-extensions</li> </ul>"},{"location":"optional_filters/","title":"Optional filters","text":""},{"location":"optional_filters/#base64_decode","title":"base64_decode","text":"<p>0.1.0 </p> <p><code>&lt;string&gt; | base64_decode</code></p> <p>Decode a base64 encoded string. The decoded value is assumed to be UTF-8 and will be decoded as UTF-8.</p> <p>Warning</p> <p>While Python Liquid assumes UTF-8 character encoding, Ruby Liquid does not seem to do so, potentially introducing byte strings into the render context.</p> <pre><code>{{ 'SGVsbG8sIFdvcmxkIQ==' | base64_decode }}\n</code></pre> output<pre><code>Hello, World!\n</code></pre> <p>If the input value is not a valid base64 encoded string, an exception will be raised.</p> <pre><code>{{ 'notbase64' | base64_decode }}\n</code></pre> output<pre><code>FilterError: invalid base64-encoded string, on line 1\n</code></pre>"},{"location":"optional_filters/#base64_encode","title":"base64_encode","text":"<p>0.1.0 </p> <p><code>&lt;string&gt; | base64_encode</code></p> <p>Encode a string using base64.</p> <p>Note</p> <p>Python Liquid returns a <code>str</code> from <code>base64_encode</code>, not <code>bytes</code>.</p> <pre><code>{{ 'Hello, World!' | base64_encode }}\n</code></pre> output<pre><code>SGVsbG8sIFdvcmxkIQ==\n</code></pre> <p>If the input value is not a string, it will be converted to a string before base64 encoding.</p> <pre><code>{{ 5 | base64_encode }}\n</code></pre> output<pre><code>NQ==\n</code></pre>"},{"location":"optional_filters/#base64_url_safe_decode","title":"base64_url_safe_decode","text":"<p>0.1.0 </p> <p><code>&lt;string&gt; | base64_url_safe_decode</code></p> <p>Decode a URL safe base64 encoded string. Substitutes <code>-</code> instead of <code>+</code> and <code>_</code> instead of <code>/</code> in the standard base64 alphabet. The decoded value is assumed to be UTF-8 and will be decoded as UTF-8.</p> <p>Warning</p> <p>While Python Liquid assumes UTF-8 character encoding, Ruby Liquid does not seem to do so, potentially introducing byte strings into the render context.</p> <pre><code>{{ 'SGVsbG8sIFdvcmxkIQ==' | base64_url_safe_decode }}\n</code></pre> output<pre><code>Hello, World!\n</code></pre> <p>If the input value is not a valid base64 encoded string, an exception will be raised.</p> <pre><code>{{ 'notbase64' | base64_url_safe_decode }}\n</code></pre> output<pre><code>FilterError: invalid base64-encoded string, on line 1\n</code></pre>"},{"location":"optional_filters/#base64_url_safe_encode","title":"base64_url_safe_encode","text":"<p>0.1.0 </p> <p><code>&lt;string&gt; | base64_url_safe_encode</code></p> <p>Encode a string using URL safe base64. Substitutes <code>-</code> instead of <code>+</code> and <code>_</code> instead of <code>/</code> in the standard base64 alphabet.</p> <p>Note</p> <p>Python Liquid returns a <code>str</code> from <code>base64_url_safe_encode</code>, not <code>bytes</code>.</p> <pre><code>{{ 'Hello, World!' | base64_url_safe_encode }}\n</code></pre> output<pre><code>SGVsbG8sIFdvcmxkIQ==\n</code></pre> <p>If the input value is not a string, it will be converted to a string before base64 encoding.</p> <pre><code>{{ 5 | base64_url_safe_encode }}\n</code></pre> output<pre><code>NQ==\n</code></pre>"},{"location":"optional_tags/","title":"Optional tags","text":""},{"location":"optional_tags/#tablerow","title":"tablerow","text":"<p>TODO</p>"},{"location":"quick_start/","title":"Quick start","text":"<p>This page gets you started using Liquid with Python. See Liquid syntax for an introduction to writing Liquid templates.</p>"},{"location":"quick_start/#install","title":"Install","text":"<p>Install Python Liquid2 from PyPi using pip:</p> <pre><code>python -m pip install python-liquid2\n</code></pre> <p>Or Pipenv:</p> <pre><code>pipenv install python-liquid2\n</code></pre> <p>Or Poetry:</p> <pre><code>poetry add python-liquid2\n</code></pre>"},{"location":"quick_start/#render","title":"<code>render()</code>","text":"<p>Here's a very simple example that renders a template from a string of text with the package-level <code>render()</code> function. The template has just one placeholder variable <code>you</code>, which we've given the value <code>\"World\"</code>.</p> <pre><code>from liquid2 import render\n\nprint(render(\"Hello, {{ you }}!\", you=\"World\"))\n# Hello, World!\n</code></pre>"},{"location":"quick_start/#parse","title":"<code>parse()</code>","text":"<p>Often you'll want to render the same template several times with different variables. We can parse source text without immediately rendering it using the <code>parse()</code> function. <code>parse()</code> returns a <code>Template</code> instance with a <code>render()</code> method.</p> <pre><code>from liquid2 import parse\n\ntemplate = parse(\"Hello, {{ you }}!\")\nprint(template.render(you=\"World\"))  # Hello, World!\nprint(template.render(you=\"Liquid\"))  # Hello, Liquid!\n</code></pre>"},{"location":"quick_start/#configure","title":"Configure","text":"<p>Both <code>parse()</code> and <code>render()</code> are convenience functions that use the default Liquid environment. For all but the simplest cases you'll want to configure an instance of <code>Environment</code>, then load and render templates from that.</p> <pre><code>from liquid2 import CachingFileSystemLoader\nfrom liquid2 import Environment\n\nenv = Environment(\n    auto_escape=True,\n    loader=CachingFileSystemLoader(\"./templates\"),\n)\n</code></pre> <p>Then, using <code>env.from_string()</code> or <code>env.get_template()</code>, we can create a <code>Template</code> from a string or read from the file system, respectively.</p> <pre><code># ... continued from above\ntemplate = env.from_string(\"Hello, {{ you }}!\")\nprint(template.render(you=\"World\"))  # Hello, World!\n\n# Try to load \"./templates/index.html\"\nanother_template = env.get_template(\"index.html\")\ndata = {\"some\": {\"thing\": [1, 2, 3]}}\nresult = another_template.render(**data)\n</code></pre> <p>Unless you happen to have a relative folder called <code>templates</code> with a file called <code>index.html</code> within it, we would expect a <code>TemplateNotFoundError</code> to be raised when running the example above.</p>"},{"location":"quick_start/#whats-next","title":"What's next?","text":"<p>Read more about configuring Liquid environments, template loaders and managing render context data.</p>"},{"location":"rendering_templates/","title":"Rendering templates","text":""},{"location":"rendering_templates/#as-simple-as-possible","title":"As simple as possible","text":"<p>For one-off templates using nothing but the default tags and filters, and without the possibility of including, rendering or extending other templates, use the package-level <code>render()</code> function.</p> <p>It takes template source text as a string and any number of keyword arguments that will be made available as template variables, returning a string.</p> <pre><code>from liquid2 import render\n\nresult = render(\"Hello, {{ you }}!\", you=\"World\")\n</code></pre> <p>If you want to render the same template multiple times with different data, use the package-level <code>parse()</code> function. It takes template source text as a string, an optional name for the template and an optional dictionary of variables to attach to the template. An instance of <code>Template</code> with a <code>render()</code> method is returned.</p> <pre><code>from liquid2 import parse\n\ntemplate = parse(\"Hello, {{ you }}!\")\nresult = template.render(you=\"World\")\nanother_result = template.render(you=\"Liquid\")\n</code></pre>"},{"location":"rendering_templates/#common-configuration","title":"Common configuration","text":"<p>Often, at a minimum, you'll want to configure a template loader that reads template source text from a file system. Doing this will tell the template engine where to look for templates when including, rendering or extending other templates.</p> <pre><code>from liquid2 import Environment\nfrom liquid2 import CachingFileSystemLoader\n\nenv = Environment(\n    loader=CachingFileSystemLoader(\"path/to/templates\", ext=\".html\"),\n)\n</code></pre> <p>Now, if there's a file called \"main.html\" in \"/path/to/templates/\", we can use <code>env.get_template()</code> to load and parse it, along with any templates it includes, renders or extends.</p> <pre><code># ... continued from above\ntemplate = env.get_template(\"main.html\")\ndata = {\"foo\": 42, \"bar\": \"hello\"}\nresult = render(**data)\n</code></pre> <p>See Liquid environments for more information about configuring an <code>Environment</code> and loading templates for details of the built-in template loaders.</p>"},{"location":"tag_reference/","title":"Default tags","text":"<p>All the tags described here are enabled by default in Python Liquid2.</p>"},{"location":"tag_reference/#comments","title":"Comments","text":"<p>0.1.0 </p> <p>Comments can be used to add documentation to your templates or \"comment out\" chunks of Liquid markup and text so that it wont be rendered. The recommended comment syntax is to surround comment text with <code>{#</code> and <code>#}</code>.</p> <pre><code>{# This is a comment #}\n{#\n    Comments can\n    span\n    multiple lines\n#}\n</code></pre> <p>We can safely comment-out Liquid markup, and add hashes so as not to conflict with existing comments.</p> <pre><code>{## comment this out for now\n{% for x in y %}\n    {# x could be empty #}\n    {{ x | default: TODO}}\n{% endfor %}\n##}\n</code></pre> <p>Inside liquid tags, any line starting with a hash will be considered a comment.</p> <pre><code>{% liquid\n  # This is a comment\n  echo \"Hello\"\n%}\n</code></pre>"},{"location":"tag_reference/#block-comments","title":"Block comments","text":"<p>0.1.0 </p> <pre><code>{% comment %} ... {% endcomment %}\n</code></pre> <p>Block comments start with the <code>comment</code> tag and end with the <code>endcomment</code> tag. It is OK for comment text to contain matching <code>comment</code>/<code>endcomment</code> or <code>raw</code>/<code>endraw</code> pairs, but is a syntax error if <code>comment</code> or <code>raw</code> tags are unbalanced.</p> <pre><code>{% comment %}This is a comment{% endcomment %}\n{% comment %}\n    Comments can\n    span\n    multiple lines\n{% endcomment %}\n</code></pre>"},{"location":"tag_reference/#inline-comments","title":"Inline comments","text":"<p>0.1.0 </p> <pre><code>{% # ... %}\n</code></pre> <p>An inline comment is a tag called <code>#</code>. Everything after the hash up to the end tag delimiter (<code>%}</code>) is comment text. Text can span multiple lines, but each line must start with a <code>#</code>.</p> <pre><code>{% # This is a comment %}\n{%-\n  # Comments can span multiple lines,\n  # but every line must start with a hash.\n-%}\n</code></pre>"},{"location":"tag_reference/#assign","title":"assign","text":"<p>0.1.0 </p> <pre><code>{% assign &lt;identifier&gt; = &lt;expression&gt; %}\n</code></pre> <p>The <code>assign</code> tag is used to define and initialize new variables or reassign existing variables.</p> <pre><code>{% assign foo = \"bar\" %}\nfoo is equal to {{ foo }}.\n\n{% assign foo = 42 %}\nfoo is now equal to {{ foo }}.\n</code></pre> <p>The expression on the right-hand side of the assignment operator (<code>=</code>) can be any Liquid primitive.</p> Primitive expression Examples Boolean literal <code>true</code> or <code>false</code> Null literal <code>null</code> or <code>nil</code> Integer literal <code>123</code> or <code>1e2</code> Float literal <code>1.23</code> or <code>1.2e3</code> String literal <code>\"Hello\"</code> or <code>'g\\'day'</code>  or <code>'Hello, ${you}'</code> Range <code>(1..5)</code> or <code>(x..y)</code> A path to a variable <code>foo</code> or <code>foo.bar</code> or <code>foo.bar[0]</code> or <code>foo[\"some thing\"].bar</code>"},{"location":"tag_reference/#filters","title":"Filters","text":"<p>0.1.0 </p> <pre><code>{% assign &lt;identifier&gt; = &lt;expression&gt; | &lt;filter&gt; [| &lt;filter&gt; ...] %}\n</code></pre> <p>Values can be modified prior to assignment using filters. Filters are applied to an expression using the pipe symbol (<code>|</code>), followed by the filter's name and, possibly, some filter arguments. Filter arguments appear after a colon (<code>:</code>) and are separated by commas (,).</p> <p>Multiple filters can be chained together, effectively piping the output of one filter into the input of another.</p> <pre><code>{% assign foo = \"bar\" | upcase %}\nfoo is equal to {{ foo }}.\n\n{% assign foo = 42 | plus: 7 | modulo: 3 %}\nfoo is now equal to {{ foo }}.\n</code></pre>"},{"location":"tag_reference/#ternary-expressions","title":"Ternary expressions","text":"<p>0.1.0 </p> <pre><code>{% assign &lt;identifier&gt; = &lt;expression&gt; if &lt;expression&gt; else &lt;expression&gt; %}\n</code></pre> <p>Inline conditional expressions can be used as an alternative to the longer form <code>{% if %}</code> tag.</p> <pre><code>{% assign foo = \"bar\" if x.y == z else \"baz\" %}\n</code></pre> <p>Filters can be applied to either branch.</p> <pre><code>{% assign foo = \"bar\" | upcase if x else \"baz\" | capitalize %}\n</code></pre> <p>Or to the result of the conditional expression as a whole using tail filters. Notice the double pipe symbol (<code>||</code>).</p> <pre><code>{% assign foo = \"bar\" if x else \"baz\" || upcase | append: \"!\" %}\n</code></pre>"},{"location":"tag_reference/#capture","title":"capture","text":"<p>0.1.0 </p> <pre><code>{% capture &lt;identifier&gt; %} &lt;liquid markup&gt; {% endcapture %}\n</code></pre> <p>The <code>capture</code> tag evaluates the contents of its block and saves the resulting string as a new variable, or reassigns an existing variable, without immediately rendering it.</p> <pre><code>{% capture welcome_message %}\n  Hello, {{ customer.name }}! Welcome to our store.\n{% endcapture %}\n\n{{ welcome_message }}\n</code></pre> <p>In some cases, it can be easier to use a template string .</p> <pre><code>{% assign welcome_message = \"Hello, ${ customer.name }! Welcome to our store.\" %}\n</code></pre>"},{"location":"tag_reference/#case","title":"case","text":"<p>0.1.0 </p> <pre><code>{% case &lt;expression&gt; %}\n  [ {% when &lt;expression&gt; %} &lt;liquid markup&gt; ] ...\n  [ {% else %} &lt;liquid markup&gt; ]\n{% endcase %}\n</code></pre> <p>The <code>case</code> tag evaluates an expression, matching the result against one or more <code>when</code> clauses. In the event of a match, the <code>when</code> block is rendered. The <code>else</code> clause is rendered if no <code>when</code> clauses match the <code>case</code> expression.</p> <pre><code>{% assign day = \"Monday\" %}\n\n{% case day %}\n  {% when \"Monday\" %}\n    Start of the work week!\n  {% when \"Friday\" %}\n    It's almost the weekend!\n  {% when \"Saturday\" or \"Sunday\" %}\n    Enjoy your weekend!\n  {% else %}\n    Just another weekday.\n{% endcase %}\n</code></pre>"},{"location":"tag_reference/#cycle","title":"cycle","text":"<p>0.1.0 </p> <pre><code>{% cycle [ &lt;string or identifier&gt;: ] &lt;expression&gt; [, &lt;expression&gt; ... ] %}\n</code></pre> <p>Render the next item in an iterator, initializing it and rendering the first value if it does not yet exist. When the items are exhausted, the iterator starts again from the beginning.</p> <pre><code>{% cycle 'odd', 'even' %}\n{% cycle 'odd', 'even' %}\n{% cycle 'odd', 'even' %}\n</code></pre> <p>You can give <code>cycle</code> a name to further distinguish multiple iterators with the same items.</p> <pre><code>{% cycle 'odd', 'even' %}\n{% cycle 'odd', 'even' %}\n{% cycle inner: 'odd', 'even' %}\n</code></pre>"},{"location":"tag_reference/#decrement","title":"decrement","text":"<p>0.1.0 </p> <pre><code>{% decrement &lt;identifier&gt; %}\n</code></pre> <p>The <code>decrement</code> tag renders the next value in a named counter, reducing the count by one each time. If a counter with the given name does not already exist, it is created automatically and initialized to zero, before subtracting 1 and outputting <code>-1</code>.</p> <pre><code>{% decrement some %}\n{% decrement thing %}\n{% decrement thing %}\n</code></pre>"},{"location":"tag_reference/#echo","title":"echo","text":"<p>0.1.0 </p> <pre><code>{% echo &lt;expression&gt; | &lt;filter&gt; [| &lt;filter&gt; ...] %}\n</code></pre> <p>The <code>echo</code> tag is equivalent to output statements, an expression surrounded by <code>{{</code> and <code>}}</code>, just in tag form. It is mostly used inside <code>{% liquid %}</code> tags where plain output statements are not allowed.</p> <pre><code>Hello, {% echo you %}!\nHello, {{ you }}!\n\n{% liquid\n  for product in collection.products\n    echo product.title | capitalize\n  endfor\n%}\n</code></pre>"},{"location":"tag_reference/#ternary-expressions_1","title":"Ternary expressions","text":"<p>0.1.0 </p> <pre><code>{% echo &lt;expression&gt; if &lt;expression&gt; else &lt;expression&gt; %}\n</code></pre> <p>Just like output statements and the <code>assign</code> tag, you can use inline conditional expressions inside <code>echo</code> tags.</p> <pre><code>{% echo \"bar\" | upcase if x else \"baz\" | capitalize %}\n\n{% liquid\n  for product in collection.products\n    echo product.title | capitalize if \"foo\" in product.tags\n  endfor\n%}\n</code></pre>"},{"location":"tag_reference/#extends","title":"extends","text":"<p>0.1.0 </p> <pre><code>{% extends &lt;template name&gt; %}\n</code></pre> <p>Together with the <code>block</code> tag, the <code>extends</code> tag allows you to inherit content and Liquid markup from parent templates and define blocks that can be overridden by child templates.</p> <p>In this example <code>page.html</code> inherits from <code>base.html</code> and overrides the <code>content</code> block. As <code>page.html</code> does not define a <code>footer</code> block, the footer from <code>base.html</code> is used.</p> base.html<pre><code>&lt;body&gt;\n  &lt;div id=\"content\"&gt;{% block content required %}{% endblock %}&lt;/div&gt;\n  &lt;div id=\"footer\"&gt;{% block footer %}Default footer{% endblock %}&lt;/div&gt;\n&lt;/body&gt;\n</code></pre> page.html<pre><code>{% extends 'base.html' %}\n{% block content %}Hello, {{ you }}!{% endblock %}\n</code></pre>"},{"location":"tag_reference/#block","title":"block","text":"<p>0.1.0 </p> <pre><code>{% block &lt;name&gt; [required] %} &lt;Liquid markup&gt; {% endblock [&lt;name&gt;] %}\n</code></pre> <p>Every <code>block</code> tag must have a name that is unique to the template. <code>endblock</code> tags can include a name too. If given, the <code>endblock</code> name must match the name given at the start of the block.</p> <p>If the optional <code>required</code> argument is given, the block must be overridden by a child template, otherwise a <code>RequiredBlockError</code> will be raised.</p> <pre><code>&lt;body&gt;\n  &lt;div id=\"content\"&gt;\n    {% block content %}\n      {% block title %}\n        &lt;h1&gt;Some Title&lt;/h1&gt;\n      {% endblock title %}\n    {% endblock content %}\n  &lt;/div&gt;\n  &lt;div id=\"footer\"&gt;\n    {% block footer %}\n      Default footer\n    {% endblock footer %}\n  &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"tag_reference/#for","title":"for","text":"<p>0.1.0 </p> <pre><code>{% for &lt;identifier&gt; in &lt;expression&gt;\n    [ limit: &lt;expression&gt; ] [ offset: &lt;expression&gt; ] [ reversed ] %}\n  &lt;liquid markup&gt;\n  [ {% else %} &lt;liquid markup&gt; ]\n{% endfor %}\n</code></pre> <p>The <code>for</code> tag renders its block once for each item in an iterable object, like an array/list or mapping/dict/hash. If the iterable is empty and an <code>else</code> block given, it will be rendered instead.</p> <pre><code>{% for product in collection %}\n    - {{ product.title }}\n{% else %}\n    No products available\n{% endfor %}\n</code></pre> <p>Range expression are often used with the <code>for</code> tag to loop over increasing integers.</p> <pre><code>{% for i in (1..4) %}\n    {{ i }}\n{% endfor %}\n</code></pre>"},{"location":"tag_reference/#limit","title":"limit","text":"<p>If a <code>limit</code> argument is given, the loop will stop after the specified number of iterations.</p> <pre><code>{% for product in collection.products limit: 2 %}\n    - {{ product.title }}\n{% endfor %}\n</code></pre>"},{"location":"tag_reference/#offset","title":"offset","text":"<p>If an <code>offset</code> argument is given, it should be an integer specifying how many items to skip before starting the loop.</p> <pre><code>{% for product in collection.products limit: 2 %}\n    - {{ product.title }}\n{% endfor %}\n</code></pre> <p><code>offset</code> can also be given the special value <code>\"continue\"</code>, in which case the loop will start from where a previous loop with the same iterable left off.</p> <pre><code>{% for product in collection.products limit: 2 %}\n    - {{ product.title }}\n{% endfor %}\n\n{% for product in collection.products offset: continue %}\n    - {{ product.title }}!\n{% endfor %}\n</code></pre>"},{"location":"tag_reference/#reversed","title":"reversed","text":"<p>If the reversed flag is given, the target iterable will be iterated in reverse order.</p> <pre><code>{% for product in collection.products reversed %}\n    - {{ product.title }}\n{% endfor %}\n</code></pre>"},{"location":"tag_reference/#break","title":"break","text":"<p>You can exit a loop early using the <code>break</code> tag.</p> <pre><code>{% for product in collection.products %}\n    {% if product.title == \"Shirt\" %}\n        {% break %}\n    {% endif %}\n    - {{ product.title }}\n{% endfor %}\n</code></pre>"},{"location":"tag_reference/#continue","title":"continue","text":"<p>You can skip all or part of a loop iteration with the <code>continue</code> tag.</p> <pre><code>{% for product in collection.products %}\n    {% if product.title == \"Shirt\" %}\n        {% continue %}\n    {% endif %}\n    - {{ product.title }}\n{% endfor %}\n</code></pre>"},{"location":"tag_reference/#forloop","title":"forloop","text":"<p>A <code>forloop</code> object is available inside every <code>for</code> tag block.</p> Property Description Type <code>name</code> The loop variable name and target identifier, separated by a hyphen. string <code>length</code> The length of the sequence being iterated. integer <code>index</code> The 1-base index of the current iteration. integer <code>index0</code> The 0-base index of the current iteration. integer <code>rindex</code> The 1-base index of the current iteration counting from the end. integer <code>rindex0</code> The 0-base index of the current iteration counting from the end. integer <code>first</code> <code>true</code> if the current iteration is the first, <code>false</code> otherwise. bool <code>last</code> <code>true</code> is the current iteration is the last, <code>false</code> otherwise. bool <code>parentloop</code> the <code>forloop</code> object of an enclosing <code>for</code> loop. forloop <pre><code>{% for product in collection.products %}\n    {% if forloop.first %}\n      &lt;b&gt;{{ product.title }}&lt;/b&gt; - {{ forloop.index0 }}\n    {% else %}\n      {{ product.title }} - {{ forloop.index0 }}\n    {% endif %}\n{% endfor %}\n</code></pre>"},{"location":"tag_reference/#if","title":"if","text":"<p>0.1.0 </p> <pre><code>{% if &lt;expression&gt; %}\n  &lt;liquid markup&gt;\n  [ {% elsif &lt;expression&gt; %} &lt;liquid markup&gt; [ {% elsif &lt;expression&gt; %} ... ]]\n  [ {% else %} &lt;liquid markup&gt; ... ]\n{% endif %}\n</code></pre> <p>The <code>if</code> tag conditionally renders its block if its expression evaluates to be truthy. Any number of <code>elsif</code> blocks can be given to add alternative conditions, and an <code>else</code> block is used as a default if no preceding conditions were truthy.</p> <pre><code>{% if product.title == \"OK Hat\" %}\n  This hat is OK.\n{% elsif product.title == \"Rubbish Tie\" %}\n  This tie is rubbish.\n{% else %}\n  Not sure what this is.\n{% endif %}\n</code></pre>"},{"location":"tag_reference/#conditional-expressions","title":"Conditional expressions","text":"<p>Any primitive expression can be tested for truthiness, like <code>{% if some_variable %}</code>, or you can use a combination of the following operators. Only <code>false</code>, <code>nil</code>/<code>null</code> and the special undefined object are falsy in Liquid.</p> Operator Description Example <code>==</code> Equals <code>product.title == \"Nice Shoes\"</code> <code>!=</code> Not equals <code>user.name != \"anonymous\"</code> <code>&gt;</code> Greater than <code>product.was_price &gt; product.price</code> <code>&lt;</code> Less than <code>collection.products.size &lt; 10</code> <code>&gt;=</code> Greater than or equal to <code>user.age &gt;= 18</code> <code>&lt;=</code> Less than or equal to <code>basket.size &lt;= 0</code> <code>and</code> Logical and <code>x and y</code> <code>and</code> Logical or <code>x or y</code> <code>not</code> Logical not <code>not x</code>"},{"location":"tag_reference/#operator-precedence","title":"Operator precedence","text":"<p><code>and</code> binds more tightly than <code>or</code>, just like in Python. Terms can be grouped with parentheses to explicitly control logical operator precedence.</p> <pre><code>{% if (user != empty and user.eligible and user.score &gt; 100) or exempt %}\n    user is special\n{% else %}\n    denied\n{% endif %}\n</code></pre>"},{"location":"tag_reference/#include","title":"include","text":"<p>0.1.0 </p> <pre><code>{% include &lt;template name&gt;\n    [ ( with | for ) &lt;expression&gt; [ as &lt;identifier&gt; ]]\n    [[,] &lt;identifier&gt;: &lt;expression&gt; [, [&lt;identifier&gt;: &lt;expression&gt; ... ]]]\n%}\n</code></pre> <p>The <code>include</code> tag loads and renders a named template, inserting the resulting text in its place. The name of the template to include can be a string literal or a variable resolving to a string. When rendered, the included template will share the same scope as the current template.</p> <pre><code>{% include \"snippets/header.html\" %}\n</code></pre>"},{"location":"tag_reference/#with","title":"with","text":"<p>Using the optional <code>with</code> syntax, we can bind a value to a variable that will be in scope for the included template. By default, that variable will be the name of the included template. Alternatively we can specify the variable to use with the <code>as</code> keyword followed by an identifier.</p> <p>Here, the template named <code>greeting</code> will have access to a variable called <code>greeting</code> with the value <code>\"Hello\"</code>.</p> <pre><code>{% assign greetings = \"Hello,Goodbye\" | split: \",\" %}\n{% include \"greeting\" with greetings.first %}\n</code></pre>"},{"location":"tag_reference/#for_1","title":"for","text":"<p>If an array-like object it given following the <code>for</code> keyword, the named template will be rendered once for each item in the sequence and, like <code>with</code> above, the item value will be bound to a variable named after the included template.</p> <p>In this example the template named <code>greeting</code> will be rendered once with the variable <code>greeting</code> set to <code>\"Hello\"</code> and once with the variable <code>greeting</code> set to <code>\"Goodbye\"</code>.</p> <pre><code>{% assign greetings = \"Hello, Goodbye\" | split: \", \" %}\n{% include \"greeting\" for greetings as greeting %}\n</code></pre>"},{"location":"tag_reference/#keyword-arguments","title":"Keyword arguments","text":"<p>Additional keyword arguments given to the <code>include</code> tag will be added to the included template's scope, then go out of scope after the included template has been rendered.</p> <pre><code>{% include \"partial_template\" greeting: \"Hello\", num: 3, skip: 2 %}\n</code></pre>"},{"location":"tag_reference/#increment","title":"increment","text":"<p>0.1.0 </p> <pre><code>{% increment &lt;identifier&gt; %}\n</code></pre> <p>The <code>increment</code> tag renders the next value in a named counter, increasing the count by one each time. If a counter with the given name does not already exist, it is created automatically and initialized to zero, which is output before adding <code>1</code>.</p> <pre><code>{% increment some %}\n{% increment thing %}\n{% increment thing %}\n</code></pre>"},{"location":"tag_reference/#liquid","title":"liquid","text":"<p>0.1.0 </p> <pre><code>{% liquid\n  &lt;tag name&gt; [&lt;expression&gt;]\n  [ &lt;tag name&gt; [&lt;expression&gt;]]\n  ...\n%}\n</code></pre> <p>The <code>liquid</code> tag encloses line statements, where each line starts with a tag name and is followed by the tag's expression. Expressions inside <code>liquid</code> tags must fit on one line as we use <code>\\n</code> as a delimiter indicating the end of the expression.</p> <p>Note that output statement syntax (<code>{{ &lt;expression&gt; }}</code>) is not allowed inside <code>liquid</code> tags, so you must use the <code>echo</code> tag instead.</p> <pre><code>{% liquid\n  assign username = \"Brian\"\n\n  if username\n    echo \"Hello, \" | append: username\n  else\n    echo \"Hello, user\"\n  endif\n\n  for i in (1..3)\n    echo i\n  endfor\n%}\n</code></pre> <p>Also, inside <code>liquid</code> tags, any line starting with a hash will be considered a comment.</p> <pre><code>{% liquid\n  # This is a comment\n  echo \"Hello\"\n%}\n</code></pre>"},{"location":"tag_reference/#macro","title":"macro","text":"<p>0.1.0 </p> <pre><code>{% macro &lt;name&gt; [[,] [ &lt;identifier&gt;[: &lt;expression&gt;]] ... ] %}\n  &lt;liquid markup&gt;\n{% endmacro %}\n</code></pre> <pre><code>{% call &lt;name&gt; [[,] [ &lt;identifier&gt;[: &lt;expression&gt;]] ... ] %}\n</code></pre> <p>The <code>macro</code> tag defines a parameterized block that can later be called using the <code>call</code> tag.</p> <p>A macro is like defining a function. You define a parameter list, possibly with default values, that are expected to be provided by a <code>call</code> tag. A macro tag's block has its own scope including its arguments and template global variables, just like the <code>render</code> tag.</p> <p>Note that argument defaults are bound late. They are evaluated when a call expression is evaluated, not when the macro is defined.</p> <pre><code>{% macro 'price' product, on_sale: false %}\n  &lt;div class=\"price-wrapper\"&gt;\n  {% if on_sale %}\n    &lt;p&gt;Was {{ product.regular_price | prepend: '$' }}&lt;/p&gt;\n    &lt;p&gt;Now {{ product.price | prepend: '$' }}&lt;/p&gt;\n  {% else %}\n    &lt;p&gt;{{ product.price | prepend: '$' }}&lt;/p&gt;\n  {% endif %}\n  &lt;/div&gt;\n{% endmacro %}\n\n{% call 'price' products[0], on_sale: true %}\n{% call 'price' products[1] %}\n</code></pre> <p>Excess arguments passed to <code>call</code> are collected into variables called <code>args</code> and <code>kwargs</code>, so variadic macros a possible too.</p> <pre><code>{% macro 'foo' %}\n  {% for arg in args %}\n    - {{ arg }}\n  {% endfor %}\n\n  {% for arg in kwargs %}\n    - {{ arg.0 }} =&gt; {{ arg.1 }}\n  {% endfor %}\n{% endmacro %}\n\n{% call 'foo' 42, 43, 99, a: 3.14, b: 2.71828 %}\n</code></pre>"},{"location":"tag_reference/#raw","title":"raw","text":"<p>0.1.0 </p> <pre><code>{% raw %} &lt;text&gt; {% endraw %}\n</code></pre> <p>Any text between <code>{% raw %}</code> and <code>{% endraw %}</code> will not be interpreted as Liquid markup, but output as plain text instead.</p> <pre><code>{% raw %}\n  This will be rendered {{verbatim}}, with the curly brackets.\n{% endraw %}\n</code></pre>"},{"location":"tag_reference/#render","title":"render","text":"<p>0.1.0 </p> <pre><code>{% render &lt;string&gt;\n    [ ( with | for ) &lt;expression&gt; [ as &lt;identifier&gt; ]]\n    [[,] &lt;identifier&gt;: &lt;expression&gt; [, [&lt;identifier&gt;: &lt;expression&gt; ... ]]]\n%}\n</code></pre> <p>The <code>render</code> tag loads and renders a named template, inserting the resulting text in its place. The name of the template to include must be a string literal. When rendered, the included template will have its onw scope, without variables define in the calling template.</p> <pre><code>{% render \"snippets/header.html\" %}\n</code></pre>"},{"location":"tag_reference/#with_1","title":"with","text":"<p>Using the optional <code>with</code> syntax, we can bind a value to a variable that will be in scope for the rendered template. By default, that variable will be the name of the rendered template. Alternatively we can specify the variable to use with the <code>as</code> keyword followed by an identifier.</p> <p>Here, the template named <code>greeting</code> will have access to a variable called <code>greeting</code> with the value <code>\"Hello\"</code>.</p> <pre><code>{% assign greetings = \"Hello,Goodbye\" | split: \",\" %}\n{% render \"greeting\" with greetings.first %}\n</code></pre>"},{"location":"tag_reference/#for_2","title":"for","text":"<p>If an array-like object it given following the <code>for</code> keyword, the named template will be rendered once for each item in the sequence and, like <code>with</code> above, the item value will be bound to a variable named after the rendered template.</p> <p>In this example the template named <code>greeting</code> will be rendered once with the variable <code>greeting</code> set to <code>\"Hello\"</code> and once with the variable <code>greeting</code> set to <code>\"Goodbye\"</code>.</p> <pre><code>{% assign greetings = \"Hello, Goodbye\" | split: \", \" %}\n{% render \"greeting\" for greetings as greeting %}\n</code></pre>"},{"location":"tag_reference/#keyword-arguments_1","title":"Keyword arguments","text":"<p>Additional keyword arguments given to the <code>render</code> tag will be added to the rendered template's scope, then go out of scope after the it has been rendered.</p> <pre><code>{% render \"partial_template\" greeting: \"Hello\", num: 3, skip: 2 %}\n</code></pre>"},{"location":"tag_reference/#translate","title":"translate","text":"<p>0.1.0 </p> <pre><code>{% translate\n    [context: &lt;string&gt;]\n    [, count: &lt;number&gt;]\n    [, &lt;identifier&gt;: &lt;object&gt; ] ... %}\n  &lt;text,variable&gt; ...\n[ {% plural %} &lt;text,variable&gt; ... ]\n{% endtranslate %}\n</code></pre> <p>The <code>translate</code> tag defines text to be translated into another language. Said text can contain placeholders for variables. These placeholders look like Liquid output statements, but can't use dotted or bracketed property syntax or filters.</p> <p>If a German translations object is found in the current render context, this example would output <code>Hallo Welt!</code>.</p> <pre><code>{% translate %}\n  Hello, World!\n{% endtranslate %}\n</code></pre> <p>If a <code>{% plural %}</code> block follows the message text and the special <code>count</code> argument is considered plural, the <code>{% plural %}</code> block will be rendered instead. Again, with a German translations object, this example would render <code>Hallo Welten!</code>.</p> <pre><code>{% translate count: 2 %}\n  Hello, World!\n{% plural %}\n  Hello, Worlds!\n{% endtranslate %}\n</code></pre> <p>Keyword arguments are used to add (or shadow existing) variables.</p> <pre><code>{% translate you: 'Sue' %}\n  Hello, {{ you }}!\n{% endtranslate %}\n</code></pre>"},{"location":"tag_reference/#unless","title":"unless","text":"<p>0.1.0 </p> <pre><code>{% unless &lt;expression&gt; %}\n  &lt;liquid markup&gt;\n  [ {% elsif &lt;expression&gt; %} &lt;liquid markup&gt; [ {% elsif &lt;expression&gt; %} ... ]]\n  [ {% else %} &lt;liquid markup&gt; ... ]\n{% endif %}\n</code></pre> <p>The <code>unless</code> tag conditionally renders its block if its expression evaluates to be falsy. Any number of elsif blocks can be given to add alternative conditions, and an else block is used as a default if none of preceding conditions were met.</p> <pre><code>{% unless product.title == \"OK Hat\" %}\n  This hat is OK.\n{% elsif product.title == \"Rubbish Tie\" %}\n  This tie is rubbish.\n{% else %}\n  Not sure what this is.\n{% endif %}\n</code></pre> <p>Otherwise <code>unless</code> behaves the same as <code>if</code>. See Conditional expressions.</p>"},{"location":"tag_reference/#with_2","title":"with","text":"<p>0.1.0 </p> <pre><code>{% with &lt;identifier&gt;: &lt;expression&gt; [, &lt;identifier&gt;: &lt;expression&gt; ... ] %}\n  &lt;liquid markup&gt;\n{% endwith %}\n</code></pre> <p>The <code>with</code> tag extends the template namespace with block scoped variables. These variables have the potential to shadow global variables or variables assigned with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <pre><code>{% with p: collection.products.first %}\n  {{ p.title }}\n{% endwith %}\n\n{% with a: 1, b: 3.4 %}\n  {{ a }} + {{ b }} = {{ a | plus: b }}\n{% endwith %}\n</code></pre>"},{"location":"api/babel/","title":"Babel","text":"<p>These are configurable class-based filters implementing internationalization and localization features.</p>"},{"location":"api/babel/#liquid2.builtin.filters.translate.BaseTranslateFilter","title":"liquid2.builtin.filters.translate.BaseTranslateFilter","text":"<p>Base class for the default translation filters.</p> PARAMETER DESCRIPTION <code>translations_var</code> <p>The name of a render context variable that resolves to a gettext <code>Translations</code> class. Defaults to <code>\"translations\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'translations'</code> </p> <code>default_translations</code> <p>A fallback translations class to use if <code>translations_var</code> can not be resolves. Defaults to <code>NullTranslations</code>.</p> <p> TYPE: <code>Translations | None</code> DEFAULT: <code>None</code> </p> <code>message_interpolation</code> <p>If <code>True</code> (default), perform printf-style string interpolation on the translated message, using keyword arguments passed to the filter function.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>auto_escape_message</code> <p>If <code>True</code> and the current environment has <code>auto_escape</code> set to <code>True</code>, the filter's left value will be escaped before translation. Defaults to <code>False</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api/babel/#liquid2.builtin.filters.translate.BaseTranslateFilter.format_message","title":"format_message","text":"<pre><code>format_message(\n    context: RenderContext,\n    message_text: str,\n    message_vars: dict[str, Any],\n) -&gt; str\n</code></pre> <p>Return the message string formatted with the given message variables.</p>"},{"location":"api/babel/#liquid2.builtin.DateTime","title":"liquid2.builtin.DateTime","text":"<p>A Liquid filter for formatting datetime objects.</p> PARAMETER DESCRIPTION <code>timezone_var</code> <p>The name of a render context variable that resolves to a timezone. Defaults to <code>\"timezone\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'timezone'</code> </p> <code>default_timezone</code> <p>A fallback timezone to use if <code>timezone_var</code> can not be resolved. Defaults to <code>\"UTC\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'UTC'</code> </p> <code>locale_var</code> <p>The name of a render context variable that resolves to the current locale. Defaults to <code>\"locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'locale'</code> </p> <code>default_locale</code> <p>A fallback locale to use if <code>locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p> <code>format_var</code> <p>The name of a render context variable that resolves to the current datetime format string. Defaults to <code>\"datetime_format\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'datetime_format'</code> </p> <code>default_format</code> <p>A fallback datetime format that is used if <code>format_var</code> can not be resolved. Defaults to <code>\"medium\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'medium'</code> </p> <code>input_timezone_var</code> <p>The name of a render context variable that resolves to a timezone for parsing datetimes entered as strings. Defaults to <code>\"input_timezone\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'input_timezone'</code> </p> <code>default_input_timezone</code> <p>A fallback timezone to use if <code>input_timezone_var</code> can not be resolved. Defaults to <code>\"UTC\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'UTC'</code> </p>"},{"location":"api/babel/#liquid2.builtin.DateTime.__call__","title":"__call__","text":"<pre><code>__call__(\n    left: object,\n    *,\n    context: RenderContext,\n    format: str | None = None\n) -&gt; str\n</code></pre> <p>Apply the filter and return the result.</p>"},{"location":"api/babel/#liquid2.builtin.GetText","title":"liquid2.builtin.GetText","text":"<p>               Bases: <code>BaseTranslateFilter</code>, <code>TranslatableFilter</code></p> <p>A Liquid filter equivalent of <code>gettext.gettext</code>.</p>"},{"location":"api/babel/#liquid2.builtin.NGetText","title":"liquid2.builtin.NGetText","text":"<p>               Bases: <code>BaseTranslateFilter</code>, <code>TranslatableFilter</code></p> <p>A Liquid filter equivalent of <code>gettext.ngettext</code>.</p>"},{"location":"api/babel/#liquid2.builtin.NGetText.__call__","title":"__call__","text":"<pre><code>__call__(\n    __left: object,\n    __plural: str,\n    __count: object,\n    *,\n    context: RenderContext,\n    **kwargs: Any\n) -&gt; str\n</code></pre> <p>Apply the filter and return the result.</p>"},{"location":"api/babel/#liquid2.builtin.NPGetText","title":"liquid2.builtin.NPGetText","text":"<p>               Bases: <code>BaseTranslateFilter</code>, <code>TranslatableFilter</code></p> <p>A Liquid filter equivalent of <code>gettext.npgettext</code>.</p>"},{"location":"api/babel/#liquid2.builtin.Number","title":"liquid2.builtin.Number","text":"<p>A Liquid filter for formatting decimal values.</p> PARAMETER DESCRIPTION <code>decimal_quantization_var</code> <p>The name of a render context variable that resolves to the decimal quantization to be used. Defaults to <code>\"decimal_quantization\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'decimal_quantization'</code> </p> <code>default_decimal_quantization</code> <p>A fallback decimal quantization if <code>decimal_quantization_var</code> can not be resolved. Defaults to <code>False</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>locale_var</code> <p>The name of a render context variable that resolves to the current locale. Defaults to <code>\"locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'locale'</code> </p> <code>default_locale</code> <p>A fallback locale to use if <code>locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p> <code>format_var</code> <p>The name of a render context variable that resolves to the current decimal format string. Defaults to <code>\"decimal_format\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'decimal_format'</code> </p> <code>default_format</code> <p>A fallback decimal format that is used if <code>format_var</code> can not be resolved. Defaults to <code>None</code>, which means the standard format for the current locale will be used.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>input_locale_var</code> <p>The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals. Defaults to <code>\"input_locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'input_locale'</code> </p> <code>default_input_locale</code> <p>A fallback locale to use if <code>input_locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p>"},{"location":"api/babel/#liquid2.builtin.Number.__call__","title":"__call__","text":"<pre><code>__call__(\n    left: object,\n    *,\n    context: RenderContext,\n    group_separator: bool = True\n) -&gt; str\n</code></pre> <p>Apply the filter and return the result.</p>"},{"location":"api/babel/#liquid2.builtin.Translate","title":"liquid2.builtin.Translate","text":"<p>               Bases: <code>BaseTranslateFilter</code>, <code>TranslatableFilter</code></p> <p>A Liquid filter for translating strings to other languages.</p> <p>Depending on the keyword arguments provided when the resulting filter is called, it could behave like gettext, ngettext, pgettext or npgettext.</p>"},{"location":"api/babel/#liquid2.builtin.Translate.__call__","title":"__call__","text":"<pre><code>__call__(\n    __left: object,\n    __message_context: object = None,\n    *,\n    context: RenderContext,\n    **kwargs: Any\n) -&gt; str\n</code></pre> <p>Apply the filter and return the result.</p>"},{"location":"api/babel/#liquid2.builtin.Unit","title":"liquid2.builtin.Unit","text":"<p>A Liquid filter for formatting units of measurement.</p> PARAMETER DESCRIPTION <code>locale_var</code> <p>The name of a render context variable that resolves to the current locale. Defaults to <code>\"locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'locale'</code> </p> <code>default_locale</code> <p>A fallback locale to use if <code>locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p> <code>length_var</code> <p>The name of a render context variable that resolves to a unit format length. Should be one of \"short\", \"long\" or \"narrow\". Defaults to <code>\"long\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'unit_length'</code> </p> <code>default_length</code> <p>A fallback format length to use if <code>length_var</code> can not be resolved.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'long'</code> </p> <code>format_var</code> <p>The name of a render context variable that resolves to a decimal format string. Defaults to <code>\"unit_format\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'unit_format'</code> </p> <code>default_format</code> <p>A fallback decimal format to use if <code>format_var</code> can not be resolved. Defaults to <code>None</code>, meaning the locale's standard decimal format is used.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>input_locale_var</code> <p>The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals. Defaults to <code>\"input_locale\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'input_locale'</code> </p> <code>default_input_locale</code> <p>A fallback locale to use if <code>input_locale_var</code> can not be resolved. Defaults to <code>\"en_US\"</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'en_US'</code> </p>"},{"location":"api/builtin/","title":"Builtin","text":""},{"location":"api/builtin/#liquid2.builtin.register_default_tags_and_filters","title":"liquid2.builtin.register_default_tags_and_filters","text":"<pre><code>register_default_tags_and_filters(env: Environment) -&gt; None\n</code></pre> <p>Register standard tags and filters with an environment.</p>"},{"location":"api/convenience/","title":"Convenience functions","text":""},{"location":"api/convenience/#liquid2.parse","title":"liquid2.parse","text":"<pre><code>parse(\n    source: str,\n    *,\n    name: str = \"\",\n    globals: Mapping[str, object] | None = None\n) -&gt; Template\n</code></pre> <p>Parse source as a Liquid template using the default environment.</p> PARAMETER DESCRIPTION <code>source</code> <p>Liquid template source code.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>An optional name for the template used in error messages.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>globals</code> <p>Variables that will be available to the resulting template.</p> <p> TYPE: <code>Mapping[str, object] | None</code> DEFAULT: <code>None</code> </p> Return <p>A new template bound to the default environment.</p>"},{"location":"api/convenience/#liquid2.render","title":"liquid2.render","text":"<pre><code>render(source: str, *args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Parse and render source as a Liquid template using the default environment.</p> <p>Additional arguments are passed to <code>dict()</code> and will be available as template variables.</p> PARAMETER DESCRIPTION <code>source</code> <p>Liquid template source code.</p> <p> TYPE: <code>str</code> </p> <code>*args</code> <p>dict-like arguments added to the template render context.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p>dict-like arguments added to the template render context.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Return <p>The result of rendering source as a Liquid template.</p>"},{"location":"api/convenience/#liquid2.render_async","title":"liquid2.render_async  <code>async</code>","text":"<pre><code>render_async(source: str, *args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Parse and render source as a Liquid template using the default environment.</p> <p>Additional arguments are passed to <code>dict()</code> and will be available as template variables.</p> PARAMETER DESCRIPTION <code>source</code> <p>Liquid template source code.</p> <p> TYPE: <code>str</code> </p> <code>*args</code> <p>dict-like arguments added to the template render context.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p>dict-like arguments added to the template render context.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Return <p>The result of rendering source as a Liquid template.</p>"},{"location":"api/convenience/#liquid2.extract_liquid","title":"liquid2.extract_liquid","text":"<pre><code>extract_liquid(\n    fileobj: TextIO,\n    keywords: list[str],\n    comment_tags: list[str] | None = None,\n    options: dict[object, object] | None = None,\n) -&gt; Iterator[MessageTuple]\n</code></pre> <p>A babel compatible translation message extraction method for Liquid templates.</p> <p>See https://babel.pocoo.org/en/latest/messages.html</p> <p>Keywords are the names of Liquid filters or tags operating on translatable strings. For a filter to contribute to message extraction, it must also appear as a child of a <code>FilteredExpression</code> and be a <code>TranslatableFilter</code>. Similarly, tags must produce a node that is a <code>TranslatableTag</code>.</p> <p>Where a Liquid comment contains a prefix in <code>comment_tags</code>, the comment will be attached to the translatable filter or tag immediately following the comment. Python Liquid's non-standard shorthand comments are not supported.</p> <p>Options are arguments passed to the <code>liquid.Template</code> constructor with the contents of <code>fileobj</code> as the template's source. Use <code>extract_from_template</code> to extract messages from an existing template bound to an existing environment.</p>"},{"location":"api/environment/","title":"Environment","text":""},{"location":"api/environment/#liquid2.Environment","title":"liquid2.Environment","text":"<p>Template parsing and rendering configuration.</p> <p>An <code>Environment</code> is where you might register custom tags and filters, or store global context variables that should be included with every template.</p> PARAMETER DESCRIPTION <code>loader</code> <p>A template loader from which template source text will be read when calling get_template or when rendering with the built-in <code>{% include %}</code> and <code>{% render %}</code>, among others. If <code>None</code>, the environment will be configured with an empty DictLoader.</p> <p> TYPE: <code>BaseLoader | None</code> DEFAULT: <code>None</code> </p> <code>globals</code> <p>An optional mapping of template variables that will be added to the render context of all templates rendered from the environment.</p> <p> TYPE: <code>Mapping[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>auto_escape</code> <p>If <code>True</code>, automatically escape HTML text upon output, unless the text is explicitly marked as \"safe\".</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>undefined</code> <p>The Undefined type used to represent template variables that don't exist.</p> <p> TYPE: <code>Type[Undefined]</code> DEFAULT: <code>Undefined</code> </p> <code>default_trim</code> <p>The automatic whitespace stripping mode to use. This mode can then be overridden by template authors per Liquid tag using whitespace control symbols (<code>-</code>, <code>+</code>, <code>~</code>).</p> <p> TYPE: <code>WhitespaceControl</code> DEFAULT: <code>PLUS</code> </p>"},{"location":"api/environment/#liquid2.Environment.context_depth_limit","title":"context_depth_limit  <code>class-attribute</code>","text":"<pre><code>context_depth_limit: int = 30\n</code></pre> <p>Maximum number of times a render context can be extended or wrapped before raising a <code>ContextDepthError</code>.</p>"},{"location":"api/environment/#liquid2.Environment.default_trim","title":"default_trim  <code>instance-attribute</code>","text":"<pre><code>default_trim: WhitespaceControl = (\n    PLUS if default_trim == DEFAULT else default_trim\n)\n</code></pre> <p>The default whitespace trimming mode.</p>"},{"location":"api/environment/#liquid2.Environment.filters","title":"filters  <code>instance-attribute</code>","text":"<pre><code>filters: dict[str, Callable[..., Any]] = {}\n</code></pre> <p>The environment's filter register, mapping filter names to callables.</p>"},{"location":"api/environment/#liquid2.Environment.lexer_class","title":"lexer_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lexer_class = Lexer\n</code></pre> <p>The lexer class to use when scanning template source text.</p>"},{"location":"api/environment/#liquid2.Environment.local_namespace_limit","title":"local_namespace_limit  <code>class-attribute</code>","text":"<pre><code>local_namespace_limit: int | None = None\n</code></pre> <p>Maximum number of bytes (according to sys.getsizeof) allowed in a template's local namespace before a <code>LocalNamespaceLimitError</code> is raised. We only count the size of the namespaces values, not the size of keys/names.</p>"},{"location":"api/environment/#liquid2.Environment.loop_iteration_limit","title":"loop_iteration_limit  <code>class-attribute</code>","text":"<pre><code>loop_iteration_limit: int | None = None\n</code></pre> <p>Maximum number of loop iterations allowed before a <code>LoopIterationLimitError</code> is raised.</p>"},{"location":"api/environment/#liquid2.Environment.output_stream_limit","title":"output_stream_limit  <code>class-attribute</code>","text":"<pre><code>output_stream_limit: int | None = None\n</code></pre> <p>Maximum number of bytes that can be written to a template's output stream before raising an <code>OutputStreamLimitError</code>.</p>"},{"location":"api/environment/#liquid2.Environment.suppress_blank_control_flow_blocks","title":"suppress_blank_control_flow_blocks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suppress_blank_control_flow_blocks: bool = True\n</code></pre> <p>If True (the default), indicates that blocks rendering to whitespace only will not be output.</p>"},{"location":"api/environment/#liquid2.Environment.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: dict[str, Tag] = {}\n</code></pre> <p>The environment's tag register, mapping tag names to instances of <code>Tag</code>.</p>"},{"location":"api/environment/#liquid2.Environment.template_class","title":"template_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>template_class = Template\n</code></pre> <p>The template class to use after parsing source text.</p>"},{"location":"api/environment/#liquid2.Environment.from_string","title":"from_string","text":"<pre><code>from_string(\n    source: str,\n    *,\n    name: str = \"\",\n    path: str | Path | None = None,\n    globals: Mapping[str, object] | None = None,\n    overlay_data: Mapping[str, object] | None = None\n) -&gt; Template\n</code></pre> <p>Create a template from a string.</p>"},{"location":"api/environment/#liquid2.Environment.get_template","title":"get_template","text":"<pre><code>get_template(\n    name: str,\n    *,\n    globals: Mapping[str, object] | None = None,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; Template\n</code></pre> <p>Load and parse a template using the configured loader.</p> PARAMETER DESCRIPTION <code>name</code> <p>The template's name. The loader is responsible for interpreting the name. It could be the name of a file or some other identifier.</p> <p> TYPE: <code>str</code> </p> <code>globals</code> <p>A mapping of render context variables attached to the resulting template.</p> <p> TYPE: <code>Mapping[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>context</code> <p>An optional render context that can be used to narrow the template source search space.</p> <p> TYPE: <code>RenderContext | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>Arbitrary arguments that can be used to narrow the template source search space.</p> <p> TYPE: <code>object</code> DEFAULT: <code>{}</code> </p> RAISES DESCRIPTION <code>TemplateNotFound</code> <p>If a template with the given name can not be found.</p>"},{"location":"api/environment/#liquid2.Environment.get_template_async","title":"get_template_async  <code>async</code>","text":"<pre><code>get_template_async(\n    name: str,\n    *,\n    globals: Mapping[str, object] | None = None,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; Template\n</code></pre> <p>An async version of <code>get_template()</code>.</p>"},{"location":"api/environment/#liquid2.Environment.make_globals","title":"make_globals","text":"<pre><code>make_globals(\n    globals: Mapping[str, object] | None = None\n) -&gt; dict[str, object]\n</code></pre> <p>Combine environment globals with template globals.</p>"},{"location":"api/environment/#liquid2.Environment.parse","title":"parse","text":"<pre><code>parse(source: str) -&gt; list[Node]\n</code></pre> <p>Compile template source text and return an abstract syntax tree.</p>"},{"location":"api/environment/#liquid2.Environment.setup_tags_and_filters","title":"setup_tags_and_filters","text":"<pre><code>setup_tags_and_filters() -&gt; None\n</code></pre> <p>Add tags and filters to this environment.</p> <p>This is called once when initializing an environment. Override this method in your custom environments.</p>"},{"location":"api/environment/#liquid2.Environment.tokenize","title":"tokenize","text":"<pre><code>tokenize(source: str) -&gt; list[TokenT]\n</code></pre> <p>Scan Liquid template source and return a list of Markup objects.</p>"},{"location":"api/environment/#liquid2.Environment.trim","title":"trim","text":"<pre><code>trim(\n    text: str,\n    left_trim: WhitespaceControl,\n    right_trim: WhitespaceControl,\n) -&gt; str\n</code></pre> <p>Return text after applying whitespace control.</p>"},{"location":"api/loaders/","title":"Loaders","text":""},{"location":"api/loaders/#liquid2.loader.BaseLoader","title":"liquid2.loader.BaseLoader","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for all template loaders.</p>"},{"location":"api/loaders/#liquid2.loader.BaseLoader.get_source","title":"get_source  <code>abstractmethod</code>","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p> PARAMETER DESCRIPTION <code>env</code> <p>The <code>Environment</code> attempting to load the template source text.</p> <p> TYPE: <code>Environment</code> </p> <code>template_name</code> <p>A name or identifier for a template's source text.</p> <p> TYPE: <code>str</code> </p> <code>context</code> <p>An optional render context that can be used to narrow the template source search space.</p> <p> TYPE: <code>RenderContext | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>Arbitrary arguments that can be used to narrow the template source search space.</p> <p> TYPE: <code>object</code> DEFAULT: <code>{}</code> </p>"},{"location":"api/loaders/#liquid2.loader.BaseLoader.get_source_async","title":"get_source_async  <code>async</code>","text":"<pre><code>get_source_async(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>An async version of <code>get_source</code>.</p> <p>The default implementation delegates to <code>get_source()</code>.</p>"},{"location":"api/loaders/#liquid2.loader.BaseLoader.load","title":"load","text":"<pre><code>load(\n    env: Environment,\n    name: str,\n    *,\n    globals: Mapping[str, object] | None = None,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; Template\n</code></pre> <p>Find and parse template source code.</p> PARAMETER DESCRIPTION <code>env</code> <p>The <code>Environment</code> attempting to load the template source text.</p> <p> TYPE: <code>Environment</code> </p> <code>name</code> <p>A name or identifier for a template's source text.</p> <p> TYPE: <code>str</code> </p> <code>globals</code> <p>A mapping of render context variables attached to the resulting template.</p> <p> TYPE: <code>Mapping[str, object] | None</code> DEFAULT: <code>None</code> </p> <code>context</code> <p>An optional render context that can be used to narrow the template source search space.</p> <p> TYPE: <code>RenderContext | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>Arbitrary arguments that can be used to narrow the template source search space.</p> <p> TYPE: <code>object</code> DEFAULT: <code>{}</code> </p>"},{"location":"api/loaders/#liquid2.loader.BaseLoader.load_async","title":"load_async  <code>async</code>","text":"<pre><code>load_async(\n    env: Environment,\n    name: str,\n    *,\n    globals: Mapping[str, object] | None = None,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; Template\n</code></pre> <p>An async version of <code>load()</code>.</p>"},{"location":"api/loaders/#liquid2.loader.TemplateSource","title":"liquid2.loader.TemplateSource","text":"<p>               Bases: <code>NamedTuple</code></p> <p>A Liquid template source as returned by the <code>get_source</code> method of a <code>loader</code>.</p> ATTRIBUTE DESCRIPTION <code>source</code> <p>The liquid template source code.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>The liquid template file name or other string identifying its origin.</p> <p> TYPE: <code>str</code> </p> <code>uptodate</code> <p>Optional callable that will return <code>True</code> if the template is up to date, or <code>False</code> if it needs to be reloaded.</p> <p> TYPE: <code>Callable[[], bool] | Callable[[], Awaitable[bool]] | None</code> </p> <code>matter</code> <p>Optional mapping containing variables associated with the template. Could be \"front matter\" or other meta data.</p> <p> TYPE: <code>dict[str, object] | None</code> </p>"},{"location":"api/loaders/#liquid2.FileSystemLoader","title":"liquid2.FileSystemLoader","text":"<p>               Bases: <code>BaseLoader</code></p> <p>A loader that loads templates from one or more directories on the file system.</p> PARAMETER DESCRIPTION <code>search_path</code> <p>One or more paths to search.</p> <p> TYPE: <code>str | Path | Iterable[str | Path]</code> </p> <code>encoding</code> <p>Encoding to use when opening files.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'utf-8'</code> </p> <code>ext</code> <p>A default file extension. Should include a leading period.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api/loaders/#liquid2.FileSystemLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.FileSystemLoader.get_source_async","title":"get_source_async  <code>async</code>","text":"<pre><code>get_source_async(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.FileSystemLoader.resolve_path","title":"resolve_path","text":"<pre><code>resolve_path(template_name: str) -&gt; Path\n</code></pre> <p>Return a path to the template identified by template_name.</p> <p>If the search path is a list of paths, returns the first path where template_name exists. If none of the search paths contain template_name, a TemplateNotFound exception is raised.</p>"},{"location":"api/loaders/#liquid2.CachingFileSystemLoader","title":"liquid2.CachingFileSystemLoader","text":"<p>               Bases: <code>CachingLoaderMixin</code>, <code>FileSystemLoader</code></p> <p>A file system loader that caches parsed templates in memory.</p> PARAMETER DESCRIPTION <code>search_path</code> <p>One or more paths to search.</p> <p> TYPE: <code>Union[str, Path, Iterable[Union[str, Path]]]</code> </p> <code>encoding</code> <p>Open template files with the given encoding.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'utf-8'</code> </p> <code>ext</code> <p>A default file extension. Should include a leading period.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>auto_reload</code> <p>If <code>True</code>, automatically reload a cached template if it has been updated.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>namespace_key</code> <p>The name of a global render context variable or loader keyword argument that resolves to the current loader \"namespace\" or \"scope\".</p> <p>If you're developing a multi-user application, a good namespace might be <code>uid</code>, where <code>uid</code> is a unique identifier for a user and templates are arranged in folders named for each <code>uid</code> inside the search path.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>capacity</code> <p>The maximum number of templates to hold in the cache before removing the least recently used template.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p>"},{"location":"api/loaders/#liquid2.DictLoader","title":"liquid2.DictLoader","text":"<p>               Bases: <code>BaseLoader</code></p> <p>A loader that loads templates from a dictionary.</p> PARAMETER DESCRIPTION <code>templates</code> <p>A dictionary mapping template names to template source strings.</p> <p> TYPE: <code>dict[str, str]</code> </p>"},{"location":"api/loaders/#liquid2.DictLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get the source, filename and reload helper for a template.</p>"},{"location":"api/loaders/#liquid2.CachingDictLoader","title":"liquid2.CachingDictLoader","text":"<p>               Bases: <code>CachingLoaderMixin</code>, <code>DictLoader</code></p> <p>A <code>DictLoader</code> that caches parsed templates in memory.</p>"},{"location":"api/loaders/#liquid2.PackageLoader","title":"liquid2.PackageLoader","text":"<p>               Bases: <code>BaseLoader</code></p> <p>A template loader that reads templates from Python packages.</p> PARAMETER DESCRIPTION <code>package</code> <p>Import name of a package containing Liquid templates.</p> <p> TYPE: <code>str | ModuleType</code> </p> <code>package_path</code> <p>One or more directories in the package containing Liquid templates.</p> <p> TYPE: <code>str | Iterable[str]</code> DEFAULT: <code>'templates'</code> </p> <code>encoding</code> <p>Encoding of template files.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'utf-8'</code> </p> <code>ext</code> <p>A default file extension to use if one is not provided. Should include a leading period.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'.liquid'</code> </p>"},{"location":"api/loaders/#liquid2.PackageLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.PackageLoader.get_source_async","title":"get_source_async  <code>async</code>","text":"<pre><code>get_source_async(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.ChoiceLoader","title":"liquid2.ChoiceLoader","text":"<p>               Bases: <code>BaseLoader</code></p> <p>A template loader that delegates to other template loaders.</p> PARAMETER DESCRIPTION <code>loaders</code> <p>A list of loaders implementing <code>liquid.loaders.BaseLoader</code>.</p> <p> TYPE: <code>list[BaseLoader]</code> </p>"},{"location":"api/loaders/#liquid2.ChoiceLoader.get_source","title":"get_source","text":"<pre><code>get_source(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.ChoiceLoader.get_source_async","title":"get_source_async  <code>async</code>","text":"<pre><code>get_source_async(\n    env: Environment,\n    template_name: str,\n    *,\n    context: RenderContext | None = None,\n    **kwargs: object\n) -&gt; TemplateSource\n</code></pre> <p>Get source information for a template.</p>"},{"location":"api/loaders/#liquid2.CachingChoiceLoader","title":"liquid2.CachingChoiceLoader","text":"<p>               Bases: <code>CachingLoaderMixin</code>, <code>ChoiceLoader</code></p> <p>A <code>ChoiceLoader</code> that caches parsed templates in memory.</p> PARAMETER DESCRIPTION <code>loaders</code> <p>A list of loaders implementing <code>liquid.loaders.BaseLoader</code>.</p> <p> TYPE: <code>list[BaseLoader]</code> </p> <code>auto_reload</code> <p>If <code>True</code>, automatically reload a cached template if it has been updated.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>namespace_key</code> <p>The name of a global render context variable or loader keyword argument that resolves to the current loader \"namespace\" or \"scope\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>capacity</code> <p>The maximum number of templates to hold in the cache before removing the least recently used template.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p>"},{"location":"api/loaders/#liquid2.CachingLoaderMixin","title":"liquid2.CachingLoaderMixin","text":"<p>               Bases: <code>ABC</code>, <code>_CachingLoaderProtocol</code></p> <p>A mixin class that adds caching to a template loader.</p>"},{"location":"api/tag/","title":"Tag","text":""},{"location":"api/tag/#liquid2.tag.Tag","title":"liquid2.tag.Tag","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for all built-in and custom template tags.</p>"},{"location":"api/tag/#liquid2.tag.Tag.parse","title":"parse  <code>abstractmethod</code>","text":"<pre><code>parse(stream: TokenStream) -&gt; Node\n</code></pre> <p>Return a parse tree node by parsing tokens from the given stream.</p>"},{"location":"api/template/","title":"Template","text":""},{"location":"api/template/#liquid2.Template","title":"liquid2.Template","text":"<p>A parsed template ready to be rendered.</p> <p>Don't try to instantiate <code>Template</code> directly. Use <code>parse()</code>, <code>Environment.from_string()</code> or <code>Environment.get_template()</code> instead.</p>"},{"location":"api/template/#liquid2.Template.analyze","title":"analyze","text":"<pre><code>analyze(\n    *, include_partials: bool = True\n) -&gt; TemplateAnalysis\n</code></pre> <p>Statically analyze this template and any included/rendered templates.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, we will try to load partial templates and analyze those templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"api/template/#liquid2.Template.analyze_async","title":"analyze_async  <code>async</code>","text":"<pre><code>analyze_async(\n    *, include_partials: bool = True\n) -&gt; TemplateAnalysis\n</code></pre> <p>An async version of <code>analyze</code>.</p>"},{"location":"api/template/#liquid2.Template.filter_names","title":"filter_names","text":"<pre><code>filter_names(*, include_partials: bool = True) -&gt; list[str]\n</code></pre> <p>Return a list of filter names used in this template.</p>"},{"location":"api/template/#liquid2.Template.filter_names_async","title":"filter_names_async  <code>async</code>","text":"<pre><code>filter_names_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of filter names used in this template.</p>"},{"location":"api/template/#liquid2.Template.full_name","title":"full_name","text":"<pre><code>full_name() -&gt; str\n</code></pre> <p>Return this template's path, if available, joined with its name.</p>"},{"location":"api/template/#liquid2.Template.global_variable_paths","title":"global_variable_paths","text":"<pre><code>global_variable_paths(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template including all path segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variable_paths_async","title":"global_variable_paths_async  <code>async</code>","text":"<pre><code>global_variable_paths_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template including all path segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variable_segments","title":"global_variable_segments","text":"<pre><code>global_variable_segments(\n    *, include_partials: bool = True\n) -&gt; list[Segments]\n</code></pre> <p>Return a list of variables used in this template, each as a list of segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[Segments]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variable_segments_async","title":"global_variable_segments_async  <code>async</code>","text":"<pre><code>global_variable_segments_async(\n    *, include_partials: bool = True\n) -&gt; list[Segments]\n</code></pre> <p>Return a list of variables used in this template, each as a list of segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[Segments]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variables","title":"global_variables","text":"<pre><code>global_variables(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template without path segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct root segments for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.global_variables_async","title":"global_variables_async  <code>async</code>","text":"<pre><code>global_variables_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template without path segments.</p> <p>Excludes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct root segments for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.is_up_to_date","title":"is_up_to_date","text":"<pre><code>is_up_to_date() -&gt; bool\n</code></pre> <p>Return False if the template has been modified, True otherwise.</p>"},{"location":"api/template/#liquid2.Template.is_up_to_date_async","title":"is_up_to_date_async  <code>async</code>","text":"<pre><code>is_up_to_date_async() -&gt; bool\n</code></pre> <p>An async version of is_up_to_date().</p> <p>If template.uptodate is a coroutine, it wil be awaited. Otherwise it will be called just like is_up_to_date.</p>"},{"location":"api/template/#liquid2.Template.make_globals","title":"make_globals","text":"<pre><code>make_globals(\n    render_args: Mapping[str, object]\n) -&gt; Mapping[str, object]\n</code></pre> <p>Return a mapping including render arguments and template globals.</p>"},{"location":"api/template/#liquid2.Template.render","title":"render","text":"<pre><code>render(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Render this template with args and kwargs added to the render context.</p> <p>args and kwargs are passed to <code>dict()</code>.</p>"},{"location":"api/template/#liquid2.Template.render_async","title":"render_async  <code>async</code>","text":"<pre><code>render_async(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Render this template with args and kwargs added to the render context.</p> <p>args and kwargs are passed to <code>dict()</code>.</p>"},{"location":"api/template/#liquid2.Template.render_with_context","title":"render_with_context","text":"<pre><code>render_with_context(\n    context: RenderContext,\n    buf: TextIO,\n    *args: Any,\n    partial: bool = False,\n    block_scope: bool = False,\n    **kwargs: Any\n) -&gt; int\n</code></pre> <p>Render this template using an existing render context and output buffer.</p>"},{"location":"api/template/#liquid2.Template.render_with_context_async","title":"render_with_context_async  <code>async</code>","text":"<pre><code>render_with_context_async(\n    context: RenderContext,\n    buf: TextIO,\n    *args: Any,\n    partial: bool = False,\n    block_scope: bool = False,\n    **kwargs: Any\n) -&gt; int\n</code></pre> <p>Render this template using an existing render context and output buffer.</p>"},{"location":"api/template/#liquid2.Template.tag_names","title":"tag_names","text":"<pre><code>tag_names(*, include_partials: bool = True) -&gt; list[str]\n</code></pre> <p>Return a list of tag names used in this template.</p>"},{"location":"api/template/#liquid2.Template.tag_names_async","title":"tag_names_async  <code>async</code>","text":"<pre><code>tag_names_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of tag names used in this template.</p>"},{"location":"api/template/#liquid2.Template.variable_paths","title":"variable_paths","text":"<pre><code>variable_paths(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template including all path segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variable_paths.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variable_paths_async","title":"variable_paths_async  <code>async</code>","text":"<pre><code>variable_paths_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template including all path segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variable_paths.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variable_segments","title":"variable_segments","text":"<pre><code>variable_segments(\n    *, include_partials: bool = True\n) -&gt; list[Segments]\n</code></pre> <p>Return a list of variables used in this template, each as a list of segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variable_segments.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[Segments]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variable_segments_async","title":"variable_segments_async  <code>async</code>","text":"<pre><code>variable_segments_async(\n    *, include_partials: bool = True\n) -&gt; list[Segments]\n</code></pre> <p>Return a list of variables used in this template, each as a list of segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variable_segments.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[Segments]</code> <p>A list of distinct paths for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variables","title":"variables","text":"<pre><code>variables(*, include_partials: bool = True) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template without path segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variables.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct root segments for variables in this template.</p>"},{"location":"api/template/#liquid2.Template.variables_async","title":"variables_async  <code>async</code>","text":"<pre><code>variables_async(\n    *, include_partials: bool = True\n) -&gt; list[str]\n</code></pre> <p>Return a list of variables used in this template without path segments.</p> <p>Includes variables that are local to the template, like those crated with <code>{% assign %}</code> and <code>{% capture %}</code>.</p> <p>See also global_variables.</p> PARAMETER DESCRIPTION <code>include_partials</code> <p>If <code>True</code>, will try to load and find variables in included/rendered templates too.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of distinct root segments for variables in this template.</p>"},{"location":"api/template/#liquid2.static_analysis.TemplateAnalysis","title":"liquid2.static_analysis.TemplateAnalysis  <code>dataclass</code>","text":"<p>The result of analyzing a template using <code>Template.analyze()</code>.</p> PARAMETER DESCRIPTION <code>variables</code> <p>All referenced variables, whether they are in scope or not. Including references to names such as <code>forloop</code> from the <code>for</code> tag.</p> <p> TYPE: <code>dict[str, list[Variable]]</code> </p> <code>locals</code> <p>Template variables that are added to the template local scope, whether they are subsequently used or not.</p> <p> TYPE: <code>dict[str, list[Variable]]</code> </p> <code>globals</code> <p>Template variables that, on the given line number and \"file\", are out of scope or are assumed to be \"global\". That is, expected to be included by the application developer rather than a template author.</p> <p> TYPE: <code>dict[str, list[Variable]]</code> </p> <code>filters</code> <p>All filters found during static analysis.</p> <p> TYPE: <code>dict[str, list[Span]]</code> </p> <code>tags</code> <p>All tags found during static analysis.</p> <p> TYPE: <code>dict[str, list[Span]]</code> </p>"},{"location":"api/template/#liquid2.static_analysis.Variable","title":"liquid2.static_analysis.Variable  <code>dataclass</code>","text":"<p>A variable as sequence of segments that make up its path and its location.</p> <p>Variables with the same segments compare equal, regardless of span.</p>"},{"location":"api/template/#liquid2.static_analysis.Span","title":"liquid2.static_analysis.Span  <code>dataclass</code>","text":"<p>The location of a variable, tag or filter in a template.</p>"},{"location":"api/tokens/","title":"Tokens","text":""},{"location":"api/tokens/#liquid2.token.TokenT","title":"liquid2.token.TokenT  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>The base class for all tokens.</p>"},{"location":"api/tokens/#liquid2.token.TokenT.start","title":"start  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>start: int\n</code></pre> <p>The start position of this token.</p>"},{"location":"api/tokens/#liquid2.token.TokenT.stop","title":"stop  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>stop: int\n</code></pre> <p>The end position of this token.</p>"},{"location":"api/tokens/#liquid2.token.TokenType","title":"liquid2.token.TokenType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/tokens/#liquid2.token.BlockCommentToken","title":"liquid2.token.BlockCommentToken  <code>dataclass</code>","text":"<p>               Bases: <code>CommentToken</code></p> <p>A token representing a block comment.</p> <p>That's one with a start and end tag.</p>"},{"location":"api/tokens/#liquid2.token.CommentToken","title":"liquid2.token.CommentToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing a comment.</p>"},{"location":"api/tokens/#liquid2.token.ContentToken","title":"liquid2.token.ContentToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing template text content that is not markup.</p>"},{"location":"api/tokens/#liquid2.token.ErrorToken","title":"liquid2.token.ErrorToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing a syntax error found by the lexer.</p>"},{"location":"api/tokens/#liquid2.token.ErrorToken.start","title":"start  <code>property</code>","text":"<pre><code>start: int\n</code></pre> <p>Return the start position of this token.</p>"},{"location":"api/tokens/#liquid2.token.ErrorToken.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: int\n</code></pre> <p>Return the end position of this token.</p>"},{"location":"api/tokens/#liquid2.token.InlineCommentToken","title":"liquid2.token.InlineCommentToken  <code>dataclass</code>","text":"<p>               Bases: <code>CommentToken</code></p> <p>A token representing an inline comment tag.</p> <p>That's one with <code>#</code> as the tag name. Like <code>{% # some comment %}</code>.</p>"},{"location":"api/tokens/#liquid2.token.LinesToken","title":"liquid2.token.LinesToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing line statements, where each line is a tag expression.</p> <p>The built-in <code>{% liquid %}</code> tag is an example of a tag that uses line statements.</p>"},{"location":"api/tokens/#liquid2.token.OutputToken","title":"liquid2.token.OutputToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing an output statement.</p>"},{"location":"api/tokens/#liquid2.token.PathToken","title":"liquid2.token.PathToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing the path to a variable.</p>"},{"location":"api/tokens/#liquid2.token.RangeToken","title":"liquid2.token.RangeToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing a range expression.</p> <p>For example, <code>(1..3)</code>.</p>"},{"location":"api/tokens/#liquid2.token.RawToken","title":"liquid2.token.RawToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing raw content that should be treated as plain text.</p>"},{"location":"api/tokens/#liquid2.token.TagToken","title":"liquid2.token.TagToken  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A token representing a tag.</p> <p>This could be an inline tag, or the start or end of a block tag.</p>"},{"location":"api/tokens/#liquid2.token.Token","title":"liquid2.token.Token  <code>dataclass</code>","text":"<p>               Bases: <code>TokenT</code></p> <p>A liquid expression token.</p>"},{"location":"api/tokens/#liquid2.token.Token.start","title":"start  <code>property</code>","text":"<pre><code>start: int\n</code></pre> <p>Return the start position of this token.</p>"},{"location":"api/tokens/#liquid2.token.Token.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: int\n</code></pre> <p>Return the end position of this token.</p>"},{"location":"api/tokens/#liquid2.token.is_comment_token","title":"liquid2.token.is_comment_token","text":"<pre><code>is_comment_token(token: TokenT) -&gt; TypeGuard[CommentToken]\n</code></pre> <p>A CommentToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_content_token","title":"liquid2.token.is_content_token","text":"<pre><code>is_content_token(token: TokenT) -&gt; TypeGuard[ContentToken]\n</code></pre> <p>A ContentToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_lines_token","title":"liquid2.token.is_lines_token","text":"<pre><code>is_lines_token(token: TokenT) -&gt; TypeGuard[LinesToken]\n</code></pre> <p>A LinesToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_output_token","title":"liquid2.token.is_output_token","text":"<pre><code>is_output_token(token: TokenT) -&gt; TypeGuard[OutputToken]\n</code></pre> <p>An OutputToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_path_token","title":"liquid2.token.is_path_token","text":"<pre><code>is_path_token(token: TokenT) -&gt; TypeGuard[PathToken]\n</code></pre> <p>A PathToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_range_token","title":"liquid2.token.is_range_token","text":"<pre><code>is_range_token(token: TokenT) -&gt; TypeGuard[RangeToken]\n</code></pre> <p>A RangeToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_raw_token","title":"liquid2.token.is_raw_token","text":"<pre><code>is_raw_token(token: TokenT) -&gt; TypeGuard[RawToken]\n</code></pre> <p>A RawToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_tag_token","title":"liquid2.token.is_tag_token","text":"<pre><code>is_tag_token(token: TokenT) -&gt; TypeGuard[TagToken]\n</code></pre> <p>A TagToken type guard.</p>"},{"location":"api/tokens/#liquid2.token.is_token_type","title":"liquid2.token.is_token_type","text":"<pre><code>is_token_type(\n    token: TokenT, t: TokenType\n) -&gt; TypeGuard[Token]\n</code></pre> <p>A Token type guard.</p>"},{"location":"api/undefined/","title":"Undefined","text":""},{"location":"api/undefined/#liquid2.undefined.Undefined","title":"liquid2.undefined.Undefined","text":"<p>               Bases: <code>Mapping[Any, object]</code></p> <p>The default undefined type.</p> <p>Always evaluates to an empty string. Can be iterated over and indexed without error.</p>"},{"location":"api/undefined/#liquid2.undefined.Undefined.poke","title":"poke","text":"<pre><code>poke() -&gt; bool\n</code></pre> <p>Prod the type, giving it the opertunity to raise an exception.</p>"},{"location":"api/undefined/#liquid2.undefined.StrictUndefined","title":"liquid2.undefined.StrictUndefined","text":"<p>               Bases: <code>Undefined</code></p> <p>An undefined that raises an exception for everything other than <code>repr</code>.</p>"},{"location":"api/undefined/#liquid2.undefined.DebugUndefined","title":"liquid2.undefined.DebugUndefined","text":"<p>               Bases: <code>Undefined</code></p> <p>An undefined that returns debug information when rendered.</p>"}]}